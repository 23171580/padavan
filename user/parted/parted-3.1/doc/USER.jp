==============================================================================
			GNU Parted 日本語版
==============================================================================

      written by Andrew Clausen <clausen@gnu.org>
      translated by Yoshinori K. Okuji <okuji@gnu.org>

      Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.
      Copyright (C) 2001 Yoshinori K. Okuji

      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.3
      or any later version published by the Free Software Foundation;
      with the no Invariant Sections, with the no Front-Cover Texts, and
      with no Back-Cover Texts.  A copy of the license is included in the
      file, COPYING.DOC.


目次
--------

1	導入
2	Parted の使用
3	BIOS とファームウェア
4	ブート・ローダ
5	オペレーティング・システム
6	ファイル・システム
7	LVM、ソフトウェア RAID と 直接的なファイル・システムへのアクセス
8	ディスク・イメージング
9	さらなる情報と関連ソフトウェア


1	導入
1.1	必要なソフトウェア
1.2	サポートされるプラットホーム
1.3	ライセンス
1.4	コンパイル
1.5	GNU Parted ブート・ディスク

2	Parted の使用
2.1	Parted の実行
2.2	オプション
2.3	コマンドの概要
2.4	コマンドの詳細な解説
2.5	実例

3	BIOS とファームウェア
3.1	PC BIOS
3.2	Macintosh OpenFirmware
3.3	PC98 BIOS

4	ブート・ローダ
4.1	LILO (Linux Loader)
4.2	GNU GRUB (GRand Unified Bootloader)
4.3	MS DOS、MS Windows 9x、MS Windows ME
4.4	MS Windows NT
4.5	MS Windows 2000
4.6	Quik
4.7	Yaboot

5	オペレーティング・システム
5.1	GNU/Linux と FreeBSD
5.2	MS Windows と OS/2
5.3	MacOS

6	ファイル・システム
6.1	Ext2
6.2	FAT16 と FAT32
6.3	Reiserfs

7	LVM、ソフトウェア RAID と 直接的なファイル・システムへのアクセス
7.1	ソフトウェア RAID や LVM パーティションの作成
7.2	ソフトウェア RAID や LVM 論理ボリューム上のファイル・システム操作

8	ディスク・イメージング

9	さらなる情報と関連ソフトウェア


------------------------------------------------------------------------------
1	導入
------------------------------------------------------------------------------

GNU Parted はパーティションやその上に築かれるファイルシステムを作成したり、
破棄したり、大きさを変更したり、検査したり、複製するためのプログラムです。

新しいオペレーティング・システムの領域を作成したり、ディスクの使用法を
再編成したり、ハード・ディスク間でデータをコピーしたり、たくさんの
コンピュータに繰り返しインストールされた環境を複製する「ディスク・
イメージング」を行うのに、これは役に立ちます。

この解説では、パーティションやファイルシステムに関する知識を仮定しています。
もしこれらをもっと勉強したければ、Partition mini-HOWTO を読むと良いでしょう。

それはきっとあなたのディストリビューションに含まれているか、以下から
利用可能です:

	http://www.linuxdoc.org/HOWTO/mini/Partition/index.html

GNU Parted はデータの損失の可能性を最小限に留めるように設計されました。
例えば、(電力不足のような) 障害の間にデータの損失が起きるのを避ける
ように設計され、多くの安全検査を行います。しかし、Parted にバグがある
かもしれないので、重要なファイルをバックアップしておくべきです。

GNU Parted のホームページは www.gnu.org/software/parted です。
ftp.gnu.org/gnu/parted からダウンロードできます。

Parted のメイリング・リストは parted@gnu.org です。購読するには、題名に
「subscribe」と書いて bug-parted-request@gnu.org にメールを出してください。
購読の情報やアーカイブは以下から利用可能です:

	http://mail.gnu.org/mailman/listinfo/bug-parted

バグの報告を bug-parted@gnu.org に送ってください。バグ報告を送るとき、
GNU Parted のバージョンを含めてください。もしそのバグがパーティション・
テーブルに関係しているなら、次のコマンドからの出力を入れてください:

	# fdisk /dev/hda -l
	# fdisk /dev/hda
	Command (m for help): p
	Command (m for help): x
	Extended command (m for help): p

気楽にこのリストに助けを求めてください - まずあなたの質問がここで答えられ
ていないことを確認してください。もし解説が分からなければ、もっと上手く
説明できるよう、我々に教えてください。一般的な哲学: もしあなたが助けを
求める必要があるなら、あなた (や他の人々) が助けを求める必要がないように、
何かを修正する必要があります。

また、我々はあなたの意見をとても聞きたく思っています :-)


1.1	必要なソフトウェア
------------------------------------------------------------------------------
  * e2fsprogs パッケージの一部である、libuuid。もしこれを持っていないなら、

	http://web.mit.edu/tytso/www/linux/e2fsprogs.html

    から入手できます。

もし Parted、そして e2fsprogs をコンパイルしたいなら、e2fsprogs を "make
install" と "make install-libs" する必要があることに注意してください。

  * GNU Readline (任意)、

	ftp://ftp.gnu.org/gnu/readline

    から入手できます。

もし Parted をコンパイルしていて、readline を持っていないなら、Parted の
readline サポートを ./configure への --disable-readline オプションで無効
にできます。

  * もし国際化サポートが望まれるなら、コンパイル用に GNU gettext
    (あるいは、互換ソフトウェア)。

	ftp://ftp.gnu.org/gnu/gettext


1.2	サポートされるプラットホーム
------------------------------------------------------------------------------
望むらくは、この一覧表がずっと増大することを。もしこれらのプラットホーム
の一つを持っていないなら (今のところは Linux!)、ブート・ディスクが使えます
(セクション 1.5 を参照)

  * Linux >= 2.0.x, 2.2.x (Alpha、x86 PC、PC98、Macintosh PowerPC、Sun)


注意: GNU libc 2.1 以上が必要です。おそらく --disable-nls オプションを使用
することによって、もっと古いバージョンを利用できます。 (註: この必要性をも
はや切り落としたと思います。 やるべきこと: libc 2.0 が動くか確認する!)


1.3	ライセンス
------------------------------------------------------------------------------
GNU Parted はフリーソフトウェアであり、GNU General Public License
バージョン2が適用されています。これは Parted 配布物とともに、COPYING
ファイルに含められているはずです。もしなければ、
Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
に手紙を書いてください。

注釈: libparted は GNU Parted の一部と考えられています。それは GNU General
Public License によって保護されています。それは GNU Lesser General Public
License (LGPL) の下ではリリースされて『いません』。


1.4	コンパイル
------------------------------------------------------------------------------
GNU Parted をコンパイルしたければ、通常このようにして行われます:

	$ ./configure
	$ make

しかし、./configure に対して数個のオプションが用意されています:

  --without-readline		readline を使用しません。これはあまり
				多くのライブラリが利用できないような、
				緊急用ディスクなどを作成するのに便利です。

  --disable-nls			母国語サポートを取り消します。これは
				glibc の古いバージョンや緊急用ディスクに
                                適した、機能を削減したglibc と一緒に使用
                                するのに便利です。

  --disable-shared		共有ライブラリを無効にします。これはもし
				「こわされたレジスタ (spilled register)」
				に関するコンパイル・エラーを受け取ったら、
				GNU libc の古いバージョンと一緒に使うため
				に必要になるかもしれません。ブート/緊急用
				ディスクにも有用でしょう。

  --enable-all-static		完全に静的なバイナリとして、Parted のバイ
				ナリを構築します。これはブート・ディスクに
				便利で、というのも、いかなるライブラリも
				ブート・ディスク上にインストールする必要が
				ないからです (他のプログラムが必要とするか
				もしれないけど...)。注意: strip(1) も走ら
				せたいでしょう。


1.5	GNU Parted ブート・ディスク
------------------------------------------------------------------------------
GNU/Linux をインストールしていないマシンで Parted を実行したい、あるいは、
ルート・パーティションやブート・パーティションの大きさを変更したいなら、
ブート・ディスクを使用する必要があるでしょう。

ブート・ディスクのイメージは以下から入手可能です:

	ftp://ftp.gnu.org/gnu/parted/bootdisk/partboot.img

実際にブート・ディスクを作成するには、(GNU/Linux では) こう打ち込んで
ください:

	# dd if=partboot.img of=/dev/fd0 bs=1440k

あるいは、DOS で RAWRITE.EXE を使ってください。

不運にも、そのブート・ディスクはあまり広範囲のハードウェアをサポートして
いません。もしあなたのハード・ディスクがサポートされていないなら、自分専用
のブート・ディスクを作る必要があるでしょう。parted のバイナリを parted の
ブート・ディスクから他のディスクへコピーする (方法は以下で説明) ことができ
ますし、他のブート・ディスクを試したり、自分専用のものを作ることもできます。
あつらえの parted ブート・ディスクを作るためのシェル・スクリプト、mkparted
が便利かもしれません。それはここから入手できます:

	ftp://ftp.tux.org/pub/people/kent-robotti/mkparted

ブート・ディスクから他のディスクへ parted をコピーするには:
(1) Parted のブート・ディスクで起動します。
(2) 他の (ext2 の) フロッピィ・ディスクを挿入します。もしそれがフォーマット
されていないなら、"parted /dev/fd0 mklabel loop mkfs 1 ext2" で
ファイルシステムを作成できます。
(3) そのフロッピィ・ディスクをマウントします。
("mount -t ext2 /dev/fd0 /mnt/floppy")
(4) /sbin/parted をそのフロッピィにコピーします。
("cp /sbin/parted /mnt/floppy")
(5) /lib/* をそのフロッピィにコピーします。 ("cp /lib/* /mnt/floppy)
(6) そのフロッピィをアンマウントします。 ("umount /mnt/floppy")
(7) あなたのハード・ディスクをサポート『している』ブート・ディスクを見付け
ます。 (ヒント: 大きなミラー・サイト上でさまざまなディストリビューションから
緊急用ディスクを探してみようとしなさい)
(8) あなたの緊急用ディスクで起動します。 Parted をコピーしたディスクを
マウントします。
(9) Parted を実行します:
	# cd /mnt/floppy
	# LD_LIBRARY_PATH=. ./parted


------------------------------------------------------------------------------
2	Parted の使用
------------------------------------------------------------------------------
あいにく、ディスクの分割は幾分混み入っています。これは考慮に入れる必要の
ある、たくさんの異なったシステム間での相互作用があるからです:

  * BIOS やファームウェア - メモリのチェックなどを行う、あなたのコンピュータ
内の ROM チップに組み込まれたプログラム。このシステムのプログラムを(容易には)
変更できません。BIOS やファームウェア・プログラムの例: AmiBIOS、Award、
Phoenix、OpenFirmware。これらのプログラムのうち、一つだけを持っているでしょう。

  * ブート・ローダ - 使いたいオペレーティング・システムを選択することを
可能にし、そのオペレーティング・システムをロードするプログラム。例: LILO、
GRUB、Yaboot、Quik。特に複数の種類のオペレーティング・システムをインストール
しているなら、複数のブート・ローダをインストールしているかもしれません

  * Parted を動作させるオペレーティング・システム (当座は、これは GNU/Linux
に違いありません)、そして、あなたが使用する他のオペレーティング・システム。

  * ファイル・システムの種類 - データがパーティションに格納される手段。
これらの例は: ext2、fat、hfs、reiserfs。しばしば異なるファイル・システムの
種類を含むパーティションを持っているでしょう。

Parted は上記のたくさんの組み合わせをサポートしており、将来はもっとサポート
するでしょう。それゆえ、3章が BIOS に関して、4章がブート・ローダについて、
5章がオペレーティング・システムについて、そして、6章がファイル・システムに
ついて書かれています。
	この章は Parted の使用法を記述しており、これはどんなシステムを使っ
ているかにかかわらず、大体同じです。この章を読み、そして、3、4、5と6章、
それぞれを読むべきです。しかし、あなたに関係があるセクションだけを読む必要
があります。例えば、もしブート・ローダとして LILO だけを使っているなら、
導入と、4章の LILO に関するセクションだけを読む必要があります。


2.1	Parted の実行
------------------------------------------------------------------------------

Parted は二つの様式、コマンド・ラインと対話型を持っています。Parted は常に
このように開始されるべきです:

	# parted DEVICE

ここで、DEVICE は編集するハード・ディスク・ドライブです。(もしあなたが怠け
ているなら、Parted はどのデバイスを望んでいるのか、推測しようと試みます。)

コマンド・ラインのモードでは、この後に一つかそれ以上のコマンドを続けます。
例:

	# parted /dev/sda resize 1 52 104 mkfs 2 fat

(--help のような) オプションはコマンド・ライン上でのみ指定することができます。

対話型モードでは、コマンドは一度に一つずつプロンプトに入力されます。例:

	(parted) resize 1 52.0005 104.5
	(parted) mkfs 2 fat

曖昧でない省略は許されます。例えば、「print」の代わりに「p」を、「resize」
の代わりに「re」を打つことができます。コマンドは英語でも、あなたの母国語でも
打ち込めます (もしあなたの言語が翻訳されているなら)。このことが曖昧さを生み
出すかもしれません。

また、パーティションの位置に対応する数字に小数位を指定できることに注意して
ください (メガバイト単位で)。


2.2	オプション
------------------------------------------------------------------------------
-h, --help                    ヘルプ・メッセージを表示します
-s, --script                  決してユーザの干渉を促しません
-v, --version                 バージョンを表示します


2.3	コマンドの概要
------------------------------------------------------------------------------
check MINOR                   ファイルシステムに簡単な検査を行います
cp [FROM-DEVICE] FROM-MINOR TO-MINOR      ファイルシステムを他のパーティ
                                          ションにコピーします
help [COMMAND]                一般的なヘルプか、COMMAND に関するヘルプを
                              表示します
mklabel LABEL-TYPE            新しいディスク・ラベル(パーティション・
                              テーブル)を作成します
mkfs MINOR FS-TYPE            パーティション MINOR 上にファイルシステム
                              FS-TYPE を作成します
mkpart PART-TYPE [FS-TYPE] START END      パーティションを作成します
mkpartfs PART-TYPE FS-TYPE START END      ファイル・システムと一緒にパー
                                          ティションを作成します
move MINOR START END          パーティション MINOR を移動します
name MINOR NAME               パーティション MINOR を NAME と名付けます
print                         パーティション・テーブルを表示します
quit                          プログラムを終了します
resize MINOR START END        パーティション MINOR 上のファイルシステムの
                              大きさを変更します
rm MINOR                      パーティション MINOR を削除します
select DEVICE                 編集するデバイスを選びます
set MINOR FLAG STATE          パーティション MINOR 上のフラグを変更します

FLAG は boot、root、swap、hidden、raid、lvm、lba のうちの一つです。

FS-TYPE は ext2、FAT、hfs、linux-swap、ntfs、reiserfs のうちの一つです。

LABEL-TYPE は sun、bsd、mac、loop、pc98、msdos、gpt のうちの一つです。

MINOR は Linux に使われるパーティション番号です。

PART-TYPE は primary、logical、extended のうちの一つです。
基本 (primary) パーティションは標準的な、拡張性のないパーティションです。
拡張 (extended) パーティションはただ他のパーティション、正確には論理
(logical) パーティション、を含むだけのパーティションです。さらにより正確
には、拡張パーティションはディスク・ドライブのように構築されており、
「基本」パーティション (論理パーティション) と、任意で、別の「拡張」
パーティションを保持し、それが再び細分されて ...
最大でも拡張パーティションは一つでなければならなくて、一つの基本
パーティションの領域を占めます。もし msdos ディスク・ラベルを使って
いないなら、基本パーティションだけを持つことができます。

START と END はゼロから始まる、メガバイトで表されます。小数を使っても
構いません (例: 1258.9)。


2.4	コマンドの詳細な解説
------------------------------------------------------------------------------

2.4.1	check
-------------
	check MINOR                   ファイルシステムに簡単な検査を行います

check コマンドはファイルシステムにエラーがあるかどうかを検査します。

例:

	(parted) check 1


2.4.2	cp
----------
	cp [FROM-DEVICE] FROM-MINOR TO-MINOR      ファイルシステムを他の
                                                  パーティションにコピーします

パーティションを他のパーティションにコピーし、その目的のパーティションの
元々あった中身を削除します。最初の MINOR 番号は元のパーティションを指し、
二番目は目的のパーティションを指します。

任意のパラメータとして、デバイスを与えることができ、それは目的の
パーティションがどのデバイス上にあるかを指定します。

サポートされているファイルシステム:
  * ext2 (目的のパーティションが元のパーティションよりも大きいという条件で)
  * FAT
  * linux-swap	(目的パーティションにおける mkfs と等価)

例:

	(parted) cp /dev/hdb 2 3

	/dev/hdb のパーティション2 (つまり、/dev/hdb2) を、Parted がロード
	するときに使ったデバイスのパーティション3にコピーし、パーティション3
	の以前の内容を破壊します。


2.4.3	help
------------
	help [COMMAND]                一般的なヘルプか、COMMAND に関する
				      ヘルプを表示します

例:

	(parted) help resize


2.4.4	mklabel
---------------
	mklabel LABEL-TYPE            新しいディスク・ラベル(パーティション・
				      テーブル)を作成します

新しいディスク・ラベルを、タイプ LABEL-TYPE で作成します。新しいディスク・
ラベルはパーティションを一つも持ちません。このコマンドは (通常は)、技術的に
言って、データを破壊しませんが、基本的に利用不能にしてしまい、パーティション
を修復するには、gpart (セクション 9 を参照) のようなプログラムを利用する必要
があるでしょう。(私の知る限り) gpart は msdos ディスク・ラベルにだけ使えます。
我々のこの機能を Parted に加えるかもしれません、あるいは、するべきでしょう。

注釈: みんな、「ディスク・ラベル」に違う言葉を使うようです - 以下は全て同じ
ものです: パーティション・テーブル、パーティション・マップ。また、x86 マシン
上のマスター・ブート・レコードはパーティション・テーブルと同じセクタに収めら
れています (Parted を使用するのにこのことを知る必要はありません)。

サポートされているディスク・ラベル:
  * bsd
  * loop (直接的なディスク・アクセス)
  * gpt
  * mac
  * msdos
  * pc98
  * sun

例:

	(parted) mklabel msdos


2.4.5	mkfs
------------
	mkfs MINOR FS-TYPE            パーティション MINOR 上にファイルシステム
				      FS-TYPE を作成します

パーティション上に新しいファイルシステムを作成し、そのパーティションに
存在するデータを全て破壊します。

サポートされているファイル・システム:
  * ext2
  * FAT
  * linux-swap

例:

	(parted) mkfs 2 fat


2.4.6	mkpart
--------------
	mkpart PART-TYPE [FS-TYPE] START END      (新規の)ファイルシステムを
                                                  作らずにパーティションを作
                                                  成します。データ・パーティ
                                                  ションでは、FS-TYPE が必要
                                                  とされます

新しいファイルシステムを作成『せずに』、新しいパーティションを作成します。
これは偶然に削除してしまったパーティションを回復するのに役に立ちます。

PART-TYPE はこのうちの一つです: primary (基本)、extended (拡張)、
logical (論理)。extended と logical は msdos ディスク・ラベルに対してのみ
使用します。

サポートされているファイル・システム:
  * ext2
  * FAT
  * HFS
  * linux-swap
  * NTFS
  * reiserfs

例:

	(parted) mkpart logical ext2 0.0 692.1


2.4.7	mkpartfs
----------------
	mkpartfs PART-TYPE FS-TYPE START END      ファイルシステムと一緒に
						  パーティションを作成します


新しいファイルシステム付きで新しいパーティションを作成します。削除して
しまったパーティションを回復させるのに、このコマンドを使わないでください
(代わりに mkpart を使ってください)。

PART-TYPE はこのうちの一つです: primary (基本)、extended (拡張)、
logical (論理)。extended と logical は msdos ディスク・ラベルに対してのみ
使用します。

サポートされているファイル・システム:
  * ext2
  * FAT
  * linux-swap

例:

	(parted) mkpartfs logical ext2 440 670


2.4.8	move
------------
	move MINOR START [END]        パーティション MINOR を移動します

パーティションを移動します。 注: move は決してマイナー番号を変更しません。

もし END が指定されなければ、パーティションの大きさは同じままになります。

サポートされているファイル・システム:
  * ext2 (目的のパーティションが元のパーティションより大きいという条件で)
  * FAT
  * linux-swap


2.4.9	name
------------
	name MINOR NAME               パーティション MINOR を NAME と名付け
				      ます

パーティションに名前を付けます (Mac と PC98 だけ)。 名前はクウォートで囲め
ます。 例:

	(parted) name 2 'Secret Documents'


2.4.10	print
-------------
	print                         パーティション・テーブルを表示します

パーティション・テーブルを表示します。

例:

	(parted) print
	Disk geometry for /dev/hda: 0.000-2445.679 megabytes
	Disk label type: msdos
	Minor    Start       End     Type      Filesystem  Flags
	1          0.031    945.000  primary   FAT         boot, lba
	2        945.000   2358.562  primary   ext2
	3       2358.562   2445.187  primary   linux-swap


2.4.11	resize
--------------
	resize MINOR START END        パーティション MINOR 上のファイル
				      システムの大きさを変更します

パーティションの大きさを変更します。 注: resize は決してマイナー番号を変更
しません。再び、注: 新しい拡張パーティションが完全に全ての論理パーティション
を含んでいる限り、拡張パーティションの大きさを変更できます。

Parted はファイル・システムが「デフラグ」されていることを要求しないことに
注意してください (必要なら、Parted は安全にデータを移動できます)。デフラグ
するのは時間の無駄です。邪魔しないで!

サポートされているファイル・システム:
  * ext2 - 制限: 新しい START は古い START と同じでなければなりません
  * FAT
  * linux-swap

例:

	(parted) resize 3 200 850


2.4.12	rm
----------
	rm MINOR                      パーティション MINOR を削除します

パーティションを除去します。もし偶然にこのコマンドでパーティションを
削除してしまったら、取り戻すために mkpart を使ってください (mkpartfs では
『ありません』)。また、損傷を受けたディスク・ラベルを回復させるために、
gpart プログラムを使うことも可能です (6章を参照)。

msdos ディスク・ラベルのための注意: もし論理パーティションを削除すれば、
より大きいマイナー番号の付いた論理パーティションは全部番号が付け直される
でしょう。例えば、もし 6 のマイナー番号の論理パーティションを削除すれば、
番号が 7、8、9 だった logical パーティションはそれぞれ 6、7、8 になります。
このことのために、/etc/fstab を更新しなければなりません。

例:

	(parted) rm 3


2.4.13	select
--------------
	select DEVICE                 編集するデバイスを選択します

Parted が編集するデバイスを選択します。デバイスは通常 Linux のハード・ディ
スク・デバイスか、あるいは、もしファイル・システムへの直接アクセスが要求さ
れるなら、パーティションや、ソフトウェア RAID デバイス、LVM 論理ボリューム
でしょう。

例:

	(parted) select /dev/hdb


2.4.14	set
-----------
	set MINOR FLAG STATE          パーティション MINOR 上のフラグを
				      変更します

パーティション上のフラグを変更します。フラグは「on」か「off」のどちらかで
す。これらのフラグの一部、あるいは、全部が、あなたが使っているディスク・ラ
ベルに応じて、利用できるでしょう:
  * boot (Mac、MSDOS、PC98) - そのパーティションから起動したければ、有効に
されるべきです。その意味はディスク・ラベル間でさまざまです。MSDOS ディスク・
ラベルでは、ただ一つのパーティションだけが起動可能になり得ます。もしパーティ
ションに LILO をインストールしているなら、そのパーティションは起動可能でなけ
ればなりません。PC98 ディスク・ラベルでは、全ての ext2 パーティションが起動
可能でなければなりません (これは Parted に強制されます)。
  * lba (MSDOS) - MSDOS、MS Windows 9x や MS Windows ME を基本とするオペレー
ティング・システムにリニア (LBA) モードを使うように指示するために、このフラグ
は有効にできます。
  * root (Mac) - そのパーティションが Linux によって使用されるルート・デバイ
スなら、このフラグを有効にすべきです。
  * swap (Mac) - そのパーティションが Linux によって使用されるスワップ・デバ
イスなら、このフラグを有効にすべきです。
  * hidden (MSDOS, PC98) - マイクロソフトのオペレーティング・システムから
パーティションを隠すために、このフラグを有効にできます。
  * raid (MSDOS) - Linux にそのパーティションがソフトウェア RAID パーティ
ションであることを教えるために、このフラグを有効できます。
  * LVM (MSDOS) - Linux にそのパーティションが物理ボリュームであることを教え
るために、このフラグを有効にできます。

print コマンドは各パーティションに対して有効にされているフラグ全てを表示し
ます。

例:

	(parted) set 1 boot on


2.4.15	quit
------------
	quit                          プログラムを終了します

Parted を終了させます。Linux カーネルが Parted がディスクに対して行った
変更を知るのは、Parted が終了した後だけです。しかしながら、コマンドを打ち
込んで引き起こされる変更は『おそらく』、コマンドを打てばすぐさまディスクに
反映されるでしょう。でも、Linux のキャッシュやディスクのハードウェア・
キャッシュがこれを遅延させるかもしれません。


2.5	実例
------------------------------------------------------------------------------

以下の例で、最もありふれた状況を包含するように試みます。例外はディスク・
イメージングで、それは8章で扱われています。

2.5.1	例 1
-----------------

状況

あなたのディスクの割り当てが次のようであると考えてください:

	(parted) print
	Disk geometry for /dev/hda: 0.000-1000.000 megabytes
	Disk label type: msdos
	Minor    Start       End     Type      Filesystem  Flags
	1          0.063    500.000  primary   ext2
	2        500.000    625.000  primary   linux-swap

そのディスクの最後に (パーティション 2 の後に) 375 Mb の空き領域があります。
パーティション 1 は ext2 ファイル・システムを持ち、それがルート・デバイスで
す。パーティション 2 はスワップ・デバイスです。

そのディスクの最後の空き領域をパーティション 1 上のファイル・システム用に使
いたかったとします。

手順の見本

(1) 以下の段階で、パーティション 1 上のルート・ファイル・システムとパーティ
ション 2 上のスワップ・デバイスの両方を修正します。それゆえ、どちらのパー
ティションをも使用していてはいけません。多分 Parted のブート・ディスクを
使用するべきです (セクション 1.5 を参照)。そのブート・ディスクから、Parted
を実行します:

	# parted /dev/hda

(2) パーティション 2 (スワップ・パーティション) を除去します。普通、データ
が乗っているパーティションを削除したくはないでしょう。しかし、「スワップ・
オン」 (マウント) されていないとき、スワップ・パーティションはデータを含ん
でいませんので、それを除去し、代わりのスワップ・パーティションを後で作ること
ができます。

	(parted) rm 2

(3) そのディスクの最後に新しいスワップ・パーティションを作成します:

	(parted) mkpartfs primary linux-swap 875 999.9
	(parted) print
	Disk geometry for /dev/hda: 0.000-1000.000 megabytes
	Disk label type: msdos
	Minor    Start       End     Type      Filesystem  Flags
	1          0.063    500.000  primary   ext2
	2        875.000   1000.000  primary   linux-swap

(4) 近接した空き領域に向かって、パーティション 1 を増大させます:

	(parted) resize 1 0.063 874.9

終わりました!

	(parted) print
	Disk geometry for /dev/hda: 0.000-1000.000 megabytes
	Disk label type: msdos
	Minor    Start       End     Type      Filesystem  Flags
	1          0.063    874.999  primary   ext2
	2        875.000   1000.000  primary   linux-swap


2.5.2	例 2
-----------------

状況

あなたのディスクの割り宛てがこのようになっていると考えてください:

	Disk geometry for /dev/hda: 0-8063.5 megabytes
	Disk label type: msdos
	Minor   Start     End    Type            Filesystem     Flags
	1          0.0     23.5  primary         ext2           boot
	2         23.5   8056.0  extended
	5         23.6   3545.6  logical         ext2
	6       3545.6   7067.7  logical         ext2
	7       7067.7   7326.5  logical         ext2
	8       7326.5   7585.4  logical         ext2
	9       7585.4   7844.2  logical         linux-swap

	Filesystem            Size  Used Avail Use% Mounted on
	/dev/hda8             251M   31M  207M  13% /
	/dev/hda1              23M  2.4M   19M  11% /boot
	/dev/hda5             3.4G  577M  2.7G  18% /usr
	/dev/hda6             3.4G  289M  2.9G   9% /home
	/dev/hda7             251M   12M  226M   5% /var

/home (/dev/hda6) の領域を使って、/var パーティション (/dev/hda7) を 1GB に
増やしたかったとします。

Parted でパーティションの大きさを変更するのに、resize コマンドを使用します:

	(parted) resize PARTITION_NUMBER NEW_START NEW_END

NEW_START は (あいにく) ext2 パーティションでは以前の開始点と同じでなければ
なりません。だから、この手続きはかなり複雑になります。それは可能ではあります
が :-)

注: もし (FAT パーティションでできるように) Parted が ext2 パーティションの
開始点の移動をサポートしていたらなら、それは取るに足りなかったでしょう:

	(parted) resize 6 3545.6 6200
	(parted) resize 7 6200 7326.5

手順の見本:

(1) /home パーティション (/dev/hda6) を 500MB 縮めます:

	# parted /dev/hda
	(parted) resize 6 3545.6 6200

(2) その場所に新しいパーティションを作成します。これは最終的には /var に
なるところです。この新しいパーティションは 10 と番号付けされます。

	(parted) mkpartfs logical ext2 6200 7067.7

(3) 以前の /var パーティション (/dev/hda7) を新しい方 (/dev/hda10) へコピー
します。

	(parted) cp 7 10

(4) 以前の /var を削除します。

        (parted) rm 7


この時点で、全ての 7 以降の論理パーティションは番号が変わったところです。
だから、8、9、10 はそれぞれ 7、8、9 になります。

この番号の再割り当ては、このディスク上の何らかのパーティションがマウント
されている間には行われません (これは再起動するときに起きます)。その警告
メッセージが語っているのはこのことです。だから、もしこのメッセージを受け
取ったなら、Parted によって影響を与えられた (Parted によって大きさが変更
されたり、作成されたりした) ファイルシステムを、再起動以前にマウントしよう
と試みては絶対いけません。

(5) (今では 9 と番号付けられた) 新しい /var パーティションの大きさを、
以前の /var パーティションを追加することで、変更します:
	(parted) resize 9 6200 7326.5
	(parted) quit
	Warning: The kernel was unable to re-read the partition table on
	/dev/hda (Device or resource busy).  This means Linux knows nothing
	about any modifications you made.  You should reboot your computer
	before doing anything with /dev/hda.

(6) パーティション番号が変更されたので、/etc/fstab を更新しなければなり
ません。ルート・デバイスは Parted によって影響されなかったので、これは
再起動する前に行えます。(もし Parted を使ってルート・デバイスに何かを
したいのであれば、ブート・ディスクを使う必要があります)。

もし今までの /etc/fstab がこんな感じだったら:

/dev/hda8               /                       ext2    defaults        1 1
/dev/hda1               /boot                   ext2    defaults        1 2
/dev/hda6  /home  ext2  grpquota,usrquota  0  2
/dev/cdrom              /mnt/cdrom              iso9660 noauto,owner,ro 0 0
/dev/hda5               /usr                    ext2    defaults        1 2
/dev/hda7  /var  ext2  grpquota,usrquota  0  2
/dev/fd0                /mnt/floppy             auto    noauto,owner    0 0
none                    /proc                   proc    defaults        0 0
none                    /dev/pts                devpts  gid=5,mode=620  0 0
/dev/hda9               swap                    swap    defaults        0 0

数行を変更する必要があります:
  * /var は今では /dev/hda9 です (新しいパーティションにコピーしたから)
  * /dev/hda8 (ルート・デバイス) は /dev/hda7 に番号が変更されています
  * /dev/hda9 (スワップ・デバイス) は /dev/hda8 に番号が変更されています

新しい /etc/fstab はこんな感じです:

/dev/hda7               /                       ext2    defaults        1 1
/dev/hda1               /boot                   ext2    defaults        1 2
/dev/hda6  /home  ext2  grpquota,usrquota  0  2
/dev/cdrom              /mnt/cdrom              iso9660 noauto,owner,ro 0 0
/dev/hda5               /usr                    ext2    defaults        1 2
/dev/hda9  /var  ext2  grpquota,usrquota  0  2
/dev/fd0                /mnt/floppy             auto    noauto,owner    0 0
none                    /proc                   proc    defaults        0 0
none                    /dev/pts                devpts  gid=5,mode=620  0 0
/dev/hda8               swap                    swap    defaults        0 0

(7) 再起動してください。これでおしまい！

[訳注: しかしこれだと、元々 /var のあったところは未使用のまま残されてしまう
ので、ちょっともったいない気がする... たったの5%しか使っていないんだから、
tar で固めて、/home にでも置いといて、パーティションを作り直して、tar
で復元した方が良いのでは？]


------------------------------------------------------------------------------
3	BIOS とファームウェア
------------------------------------------------------------------------------
「BIOS」 (基本入出力システム) と「ファームウェア」は同じものを意味します。
しかし、PC や PC98 に基づくコンピュータでは、BIOS という言葉の方が普通です。
Apple Macintosh や Sun のコンピュータでは、「ファームウェア」という言葉の方
が普通です。
	BIOS やファームウェアのプログラムはコンピュータ内部の ROM チップに
組み込まれており、メモリの検査などを行います。このプログラムは (容易には)
変更できません。今日の BIOS は一般的に 20 年前に使われた BIOS と互換なので、
これらのプログラムは古めかしい設計である傾向があります。何年にも渡って、
反直観的な方法で機能が追加されてきており、今日では多くの混乱をもたらす、
あまりに煩雑なシステムに導いてしまっています。

3.1	PC BIOS
------------------------------------------------------------------------------
数種の普及した PC BIOS があります: AmiBIOS、Award、Phoenix や他のものです。
それらは全て似たようなやり方で動作します。これらの BIOS はどれもパーティ
ション・テーブルを理解したり、知っていたりはしません。それらは間接的にパー
ティショニングに影響します。
	あなたのコンピュータが起動するとき:
(1) これらの BIOS はハード・ディスク上の MBR (マスター・ブート・レコード)
に収められた、ブート・ローダ・プログラムの最初のわずかな部分をロードします。
(2) BIOS はそのブート・ローダの最初のわずかな部分を実行します。
(3) そのブート・ローダ・プログラムはそれ自身の残りをロードするのに、BIOS を
使用します。
(4) そのブート・ローダはオペレーティング・システム (あるいは、他のブート・
ローダ、その場合はステップ 2 に再び戻ります) をロードするのに、BIOS を使用
します。
(5) そのオペレーティング・システムは通常のファイル・システムへのアクセスを
行うのに、BIOS を使用したり、しなかったりします。 (Windows は普通行い、Linux
や BSD はしません)

	ステップ (3) から (5) は、ディスクに話しかけるように要求するのに、
BIOS と通信するプログラムを含みます。BIOS に話しかけるのに二つのやり方が
あります: CHS (シリンダ、ヘッド、そして、セクタ) を使って、あるいは、LBA
(リニア・ブロック・アドレッシング) を使って。古めの BIOS は CHS だけをサ
ポートします。CHS サポートは将来消え去るかもしれませんが、新しい BIOS は
普通 LBA と CHS の両方をサポートしています。 (CHS は概しておぞましい遺物で
あると考えられています) (訳注: 消え去ることはないでしょう、PC がある限り)
	ブート・ローダによって行われる、ステップ (3) と (4) は常に同じアク
セス手法を使うでしょう - 常に LBA か、常に CHS で。Windows のブート・ローダ
の場合、これは Windows のブート・パーティション上の LBA フラグによって決定
されます。(フラグに関する情報は、2.4.14 を参照)。 Linux の場合、おそらく
LILO か GRUB をブート・ローダとして使用しているでしょう。 GRUB は利用可能な
ら、LBA を使い、さもなければ CHS を使います。 LILO はインストールするとき、
選択することを要求します (linear、あるいは lba32 オプションで)。
	ステップ (5) - オペレーティング・システムによって入出力が行われる -
Windows だけが BIOS によって入出力を行います。 [我々はまだその問題について
十分には分かりませんが、Windows は CHS モードでそれ自身の問題を抱えている
ように見えます。人々は Windows がそれ自身のファイル・システムなどを駄目に
する場合について教えてくれました。我々には、何が起きているのかを知るのが本当
に困難です。できることなら、LBA を使うことを強く勧めます!]
	だから、三つの状況がありえ、それらは全てここでカバーされています:
(1) CHS モードを使っていて、あなたの BIOS は CHS モードだけをサポートして
います。
(2) CHS モードを使っていて、あなたの BIOS は CHS と LBA の両方をサポートし
ています。だから、CHS モードから LBA モードへ、可能な限り早く、変換したい
です。
(3) LBA モードをすでに使っています。

3.1.1	CHS モードでの Parted の使用
----------------------------------
Linux は通常 BIOS のジオメトリを自動的に検出します。しかし、ときどき間違いを
犯します。この場合、Linux へパラメータを渡すことによって、自分で教えてあげる
べきです。例えば、Linux がハード・ドライブ /dev/hda はジオメトリ 256/64/63
を持つと考え、BIOS の設定プログラムはそのジオメトリは 512/32/63 だと書いてい
るなら、このパラメータを Linux に渡すと良いでしょう:

	hda=512,32,63

パラメータは、どんなブート・ローダを使っているかに依り、異った方法で渡され
ます。おそらく LILO を使っています。この場合、次の行を /etc/lilo.conf に追加
します: (そして、その変更が反映されるように、/sbin/lilo を実行し、再起動する
必要があります)

	append="hda=512,32,63"

Parted は普通 Linux が間違ったジオメトリを検出したかどうかを検出できます。
しかし、ディスクのパーティションがないと、これはできません。この場合、自分で
検査するべきです。これを行うのは非常に重要です。
	ときどき、Parted はパーティションがシリンダ境界に揃っていないと文句
を言うでしょう。Parted は無視するためのオプションを提供するでしょう。もし
無視するなら、Parted はパーティション・テーブルにいくつかの芸当を行うでしょう。
Linux には何の問題もないでしょう。DOS や Windows は、もし LBA モードを使って
いるなら、問題ないでしょう。もし DOS/Windows が CHS モードを使っているなら、
そのブート・ローダを再インストールすれば (セクション 4.3 を参照)、どんな問題
も解決するはずです - でも、LBA モードへの切り換えが望ましいです (以下の、
3.1.2 を参照)。
	ブート過程に関係するパーティションは、もし CHS モードが使われている
なら、シリンダ 1024 より前で終わっていなければなりません。あるパーティション
がブート過程に関係しているかどうかを決定するのに、ブート・ローダに関するセク
ションを見てください。典型的な設定は、小さな Linux の /boot パーティション、
Windows のパーティション、そして、Linux のパーティションを持っているものです。

3.1.2	CHS から LBA への変換
----------------------------------
Windows のブート・ローダ、及び、オペレーティング・システムに LBA モードを
使わせるには、全ての FAT パーティション上の LBA フラグを立てるだけです
(セクション 2.4.14 を参照)。何も問題ないはずです。もし Windows を起動する
のに問題があれば、Windows のブート・ローダを再インストールすることによって
直せます (セクション 4.3 を参照)。
	Linux は入出力に BIOS を使いません。しかし、ブート・ローダ (LILO や
GRUB) はするかもしれません。もし可能なら、GRUB は自動的に LBA を使います。
LILO は「linear」や「lba32」オプションを必要とします。だから、もし LILO が
/etc/lilo.conf を変更し、/sbin/lilo で再インストール (セクション 4.1 を参照)
した後でも起動するなら、全部終わってます! (もし問題があれば、「linear」や
「lba32」を削除し、ブート・ディスクから LILO を再インストールすることによって、
CHS に戻してください)

今や LBA を使っているので、読み進んでください...

3.1.3	LBA モード
----------------
LBA は CHS の問題の全てを解決します。しかし、Linux や Parted が LBA を使っ
ていることを見分ける、信頼できる方法はないので、Parted は揃っていないシリンダ
や、矛盾した BIOS ジオメトリについて警告を与えるかもしれません。もし LBA
モードを使っているなら、これらのメッセージは無視してかまいません。 (Parted
の古いバージョンでは問題がありましたが、それらは全て解決済みです)

もしディスクが LBA モードであるなら、Parted (や他のほとんどのプログラム) は
CHS ジオメトリは X/255/63 であると表現するでしょう - CHS から LBA に切り換え
たのでなければ。

3.2	Macintosh OpenFirmware
------------------------------------------------------------------------------
PowerMac の OpenFirmware には二つの主要なバージョンがあります - 「古い世界」
(old world) で使われているものと、「新しい世界」 (new world) の PowerMac で
のものです。それらには重大な違いがあります。しかし、両方ともパーティション・
テーブルを理解します。
	両方とも、ユーザが厳密に一つのパーティションをブート・パーティション
(ブート・ローダのあるパーティション) に選ぶことを要求します。しかし、これを
行うのに、それらは違った仕組みを用います。

3.2.1	古い世界の OpenFirmware
------------------------------
起動するように選ばれたパーティションは、Quik のような、さまざまなブート・
ローダによって設定されます。だから、あなたは何もしなくて良いはずです。我々は
これに対するサポートを Parted に追加するでしょう、もし誰か十分に騒がしく叫ん
だら...

3.2.2	新しい世界の OpenFirmware
------------------------------
新しい世界の OpenFirmware はブート・パーティションが HFS であり、ブート・
パーティションとして印が付けられていることを必要とします。ブート・パーティ
ションとして印を付けるのに、異なる仕組みを使います。これは Parted の「boot」
フラグで管理します。例えば:

	(parted) set 2 boot on


3.3	PC98 BIOS
------------------------------------------------------------------------------
PC98 BIOS はいくつのパーティションにでも、起動可能だと印を付けられるように
しています。Parted の「boot」フラグで、パーティションを起動可能だと印を付け
たり、外したりできます。例えば:

	(parted) set 2 boot off


------------------------------------------------------------------------------
4	ブート・ローダ
------------------------------------------------------------------------------
ブート・ローダは、使いたいオペレーティング・システムを選んだり、そのオペ
レーティング・システムをロードすることを可能にするプログラムです。特に、
もし複数の種類のオペレーティング・システムをインストールしているなら、複数
のブート・ローダをインストールしているかもしれません。ブート・ローダにとって、
他のブート・ローダをロードできるのは当たり前のことです。

パーティションの大きさを変更するとき、多量のデータが移動させられます。多くの
ブート・ローダはファイル・システムを理解しません。それらは単に必要とされる
ブート・ローダの情報がディスク上のどこにあるかを記憶しているだけです。もし
この情報が動かされたら、それがどこに移動させられたか教えてあげなければなり
ません。これはそのブート・ローダを再インストールすることによって行われます
(つまり、そのブート・ローダのインストーラ・プログラムを再び走らせる、それは
通常シェルで単一のコマンドを発行することを必要とします)。あらゆるブート・
ローダがこのことを必要とするわけではありません。

4.1	LILO (Linux Loader)
---------------------------
LILO は x86 用の有名なブート・ローダです。LILO のブート・ローダは通常以下で
インストールされます:

	# /sbin/lilo

もしブート・ディスクを使っているなら、代わりに次を行うべきです: (ここで、
/dev/hda1 はあなたのルート・デバイスと置き換えるべきです)

	# mount /dev/hda1 /mnt
	# chroot /mnt /sbin/lilo
	# umount /dev/hda1

LILO の (それほどではないが) 古いバージョンは LBA モードをサポートしていま
せん (セクション 3.1 を参照)。LBA モードは /etc/lilo.conf で、lba32 や
linear オプションによって有効化されます (もっと情報を得るのに、LILO の解説
を参照してください)。
	もし LBA モードを使うなら、あなたの BIOS が LBA をサポートしている
限り、何も問題ないはずです。
	もし CHS モードを使うなら、/boot ディレクトリを持つパーティションは
シリンダ 1024 内に収まっていなければなりません。だから、もし大きなディスク
(言ってみれば、8 ギガ超) を持っているなら、ディスクの初め辺りに、/boot パー
ティションを持っているべきです。

4.2	GNU GRUB (GRand Unified Bootloader)
-------------------------------------------
GRUB は x86 用の、比較的新しいブート・ローダです。どうやって GRUB がインス
トールされているかによって、それはファイル・システムを理解するかもしれない
し、単に起動ファイルが収められているかを覚えているだけかもしれません。
「Stage 1.5」を使っているなら、ファイル・システムを理解します。もし Stage 1.5
を使っていないか、パーティション番号が変わったら、Stage 2 を再インストール
する必要があります (GRUB の解説を読んでください)。そうでないなら、何もしな
くて構いません。
	GRUB は LBA が利用可能か、自動的に検出し、もし利用可能なら、それを
使うでしょう (LILO の「lba32」オプションと同等)。

4.3	MS DOS、MS Windows 9x、MS Windows ME
--------------------------------------------
DOS と Windows は、もしブート・パーティションの FAT の種類 (FAT16 か FAT32)
を変更すれば、そのブート・ローダを再インストールすることを要求します。
Parted はこれを行おうと試みる前に警告するでしょう。そのブート・ローダを再
インストールするために、ブート・ディスクを作成するか、ブート CDROM を使用
できます。ブート・ディスクの方法は Windows ME では働きません。

ブート・ディスクの方法:  (DOS/Windows 9x)

 (1) Windows ブート・ディスクの作成
	* Windows を起動します。『このことは Parted を使う前に、ブート・
ディスクを作るべきであると意味しています。』
	* Windows エクスプローラのフロッピィ・ドライブで右クリックします。
	* 「フォーマット」をクリックします。
	* 「システム・ファイルをコピーする」に印を付けます。
	* 「フォーマット」をクリックします。
	* C:\WINDOWS\COMMAND\SYS.COM を A:\ にコピーします。注: C:\WINDOWS
	は別の名前で読んでいるかもしれません、C:\WIN98 のような。
 (2) 起動するときにフロッピィ・ドライブにそのブート・ディスクを残しておいて、
Windows のブート・ディスクから起動します。
 (3) DOS プロンプトで次を打ちます:
	A:\>sys c:

訳注: 訳者は久しく日本語版 Windows を触ったことがないので、訳語が当ってないか
もしれません。違ってたら、教えてください。

CDROM の方法:  (Windows 9x/ME)

 (1) Windows の CDROM を挿し、それから起動します。(「CDROM サポートなしで
起動」を選びます)
 (2) 次のように打ちます:
	A:\>c:
	C:\>cd \windows\command		(\win98\command や似たようなものかも)
	C:\WINDOWS\COMMAND>sys c:


また、DOS や Windows は数個の制限を押し付けます:

  * ブート・パーティションは「boot」フラグで選択されているべきです。たった
一つのブート・パーティションだけが選択され得ます (ときどき「アクティブ」
(active) パーティションと呼ばれます)。例えば、パーティション 3 をブート・
パーティションに設定するには、こうします:

	(parted) set 3 boot on

  * MS DOS や MS Windows 9x/ME は最初の FAT パーティションからしか起動でき
ません。すなわち、一番小さい『マイナー』番号を持つ、隠されていない FAT パー
ティションです。GRUB や LILO のようなブート・ローダ (そして、いくつかの BIOS)
はこの振る舞いを変更できることに注意してください...

  * もし (LBA アドレッシングではなく) CHS アドレッシングを使っているなら、
ブート・パーティションの開始点はシリンダ 1024 よりも小さくなければなりません。
ブート・パーティション上の LBA フラグを有効にしたり、無効にすることによって、
MS DOS に LBA アドレッシングを使う (あるいは、使わない) ように教えることが
できます。例えば、パーティション 2 上の LBA フラグを有効するには、こうします:

	(parted) set 2 lba on

注: LBA アドレッシングは、PC-DOS の全てバージョンだけでなく、MS-DOS 6.22 や
それ以前ではサポートされていません。

警告: いくつかの BIOS では、BIOS でも有効にしないと、LBA アドレッシングが
有効にならないでしょう。何らかの理由で、Windows がこのフラグを変更した後に
起動しないなら、これがおそらくその問題です。

  * 「本当の」MS-DOS (つまり、バージョン 6.22 まで) と MS-DOS 7.0 (つまり、
Windows 95/95a) は FAT32 を知りません。そのため、『最初の』 FAT パーティ
ションが FAT32 のとき、それらを 『二番目の』 FAT (もちろん、FAT16 のみ)
パーティションから起動することが可能です。両方とも基本パーティションでなけ
ればならず、起動したい方をアクティブ・パーティションに設定する必要がある
でしょう。

4.4	MS Windows NT
--------------------------------------
Windows NT は FAT32 パーティションを読んだり、起動することができません。
それゆえ、もし Windows NT で使いたいなら、FAT16 パーティションから FAT32
パーティションに変更しては絶対いけません。

4.5	MS Windows 2000
-----------------------
Windows 2000 は、システム・パーティションの FAT の種類 (FAT16 か FAT32)
を変更したら、そのブート・ローダを再インストールすることを要求します。Parted
はこれを行おうと試みる前に警告するでしょう。そのブート・ローダを再インストー
ルするには、次のようにします:
 (1) Windows 2000 の CD から起動します。
 (2) インストールに取りかかりたいかどうかを訊くでしょう。Enter を打ちます。
 (3) そして、新しいシステムをインストールしたいか、存在するシステムを修復し
たいかを尋ねるでしょう。後者を選びます (「R」を押して)。
 (4) 自動修復を行いたいか、復旧コンソール (recovery console) を使いたいかを
訊くでしょう。復旧コンソールを使うと選択します。
 (5) そのコンソールで、こう打ちます:

	C:\>fixboot

NT/2000 のブート・ローダはまた以下を必要とします:
  * 『基本』 FAT12、FAT16、あるいは、NTFS パーティション (Windows 2000 では
FAT32 も可能)、それは「システム・パーティション」と呼ばれますが、その中に、
それ自身のブート・セクタのコードがあること。このパーティションは「boot」
フラグが Parted で立てられているべきです。
  * ファイル NTLDR、BOOT.INI と NTDETECT.COM がシステム・パーティション内に
あること。BOOT.INI は基本パーティションの物理位置や「ブート・パーティション」
と呼ばれる、Windows NT がインストールされた論理ドライブについての情報を保持
します。ブート・パーティションとシステム・パーティションは一つの基本パーティ
ションに一緒に設置してもかまいません。
  * 任意で、ファイル NTBOOTDD.SYS がシステム・パーティション内にあること、
それは、自身の BIOS を持たない (あるいは、その BIOS が大きなディスクにアク
セスできない) ときの、SCSI や IDE コントローラの名前を変えられたディスク・
ドライバです。
  * MS Windows NT では、システム・パーティションはシリンダ 1024 以前で終わる
べきで、シリンダ 1024 以前に開始し『なければなりません』。もしシリンダ 1024
以降で終わり、起動に必要なファイルがこの境界以降に動かされたら、MS Windows
NT はもはや開始しないでしょう!
  * ブートとシステム・パーティションの両方は、その他の変更なしに、大きさを
変更されてもかまいません。
  * もしブート・パーティションの番号 (つまり、その『マイナー』番号) が変更
されれば、BOOT.INIT を更新しなければなりません。

4.6	Quik
------------
Quik は「旧世界 (old world)」の Macintosh PowerPC 用の、普及したブート・
ローダです。もしext2 パーティションの大きさを変えたら、Quik を再インストー
ルする必要があります:

	# /sbin/quik

4.7	Yaboot
--------------
Yaboot は「新世界 (new world)」の Macintosh PowerPC 用の、普及したブート・
ローダです。(「新世界」は 1999 から製造されている、色の付いた PowerPC に
属しています)
	Yaboot は、少なくとも 800k なければならない、それ自身の起動パーティ
ションを必要とします。だから、もし GNU/Linux を真っ新からインストールしてい
るなら、このようなことをするでしょう:

	(parted) mklabel mac
	(parted) print
	Disk geometry for /dev/sda: 0.000-6149.882 megabytes
	Disk label type: mac
	Minor    Start       End     Filesystem  Name                  Flags
	1          0.000      0.031              Apple
	(parted) mkpart primary hfs 0.032 1
	(parted) print
	Disk geometry for /dev/hdb: 0.000-6149.882 megabytes
	Disk label type: mac
	Minor    Start       End     Filesystem  Name                  Flags
	1          0.000      0.031              Apple
	2          0.031      1.000
	(parted) set 2 boot on
	(parted) print
	Disk geometry for /dev/hdb: 0.000-6149.882 megabytes
	Disk label type: mac
	Minor    Start       End     Filesystem  Name                  Flags
	1          0.000      0.031              Apple
	2          0.031      1.000                                    boot

	パーティションの大きさを変更した後に Yaboot を再インストールする
必要はありません。Yaboot は ybin でインストールされます。


------------------------------------------------------------------------------
5	オペレーティング・システム
------------------------------------------------------------------------------
今のところ、Parted は GNU/Linux の下でのみ動作します。しかし、他のオペレー
ティング・システムによって使われている、あるいは、共有されたパーティション
の大きさを変更するのに利用できます。

ファイル・システムの大きさを変更したいとき、マウントされていないことを確認
してください。Parted はマウントされたパーティションの大きさを変更できません
(これは将来変わるかもしれません...)

もしルートやブート・パーティションの大きさを変更したいなら、ブート・ディスク
を使う (セクション 1.5 を参照) か、ext2resize パッケージに含まれている、
Andreas Dilger の online ext2 resizer (詳しくは、6章を参照) を使ってください。

もしマウントされたパーティションがあるディスクのパーティション・テーブルを
修正するなら、すぐに再起動するべきです。Linux はパーティション・テーブルに
加えた変更について分からないでしょう。 (これはカーネル 2.4 で、それのサポー
トを追加するときに直されるでしょう)


5.1	GNU/Linux と FreeBSD
------------------------------------------------------------------------------
両方のシステムはディスク・ラベルにはかなり柔軟で、たくさんの異なるディスク・
ラベルの種類をサポートしています。
	FreeBSD は、MSDOS パーティション・テーブルとは互換性のない、
ディスク・ラベル・システムと、MSDOS パーティション・テーブルと互換な、
パーティション・スライス・システムを持ちます。Parted は BSD ディスク・
ラベル・システムだけをサポートします。そのパーティション・スライス・システム
をサポートすることはありそうになく、なぜなら、その意味論はいささか奇妙で、
「普通の」パーティション・テーブルがやるようには働かないからです。


5.2	MS Windows と OS/2
------------------------------------------------------------------------------
MS Windows と OS/2 は msdos ディスク・ラベルだけをサポートしています。それゆ
え、もし新しいディスク・ラベルを作成するなら、以下を使用するべきです:

	(parted) mklabel msdos


5.3	MacOS
------------------------------------------------------------------------------
MacOS (と OpenFirmware) は mac ディスク・ラベルだけを理解します。それゆえ、
もし新しいディスク・ラベルを作成するなら、以下を使用するべきです:

	(parted) mklabel mac

注: Mac パーティション・マップでは、空き領域はパーティション・マップの項目
をとってしまう (そして、Linux は 15 を超える項目を持つことを好まない) ので、
空き領域を残すのを避けるべきです。例えば、もし以下を行えば:

	(parted) print
	Disk geometry for /dev/sda: 0.000-6149.882 megabytes
	Disk label type: mac
	Minor    Start       End     Filesystem  Name                  Flags
	1          0.000      0.031              Apple
	2          0.031      1.000                                    boot
	3          1.000   1000.000  ext2        root                  root
	(parted) mkpartfs primary ext2 1001 2000
	(parted) print
	Disk geometry for /dev/sda: 0.000-6149.882 megabytes
	Disk label type: mac
	Minor    Start       End     Filesystem  Name                  Flags
	1          0.000      0.031              Apple
	2          0.031      1.000                                    boot
	3          1.000   1000.000  ext2        root                  root
	4       1001.000   2000.000  ext2

パーティション 3 と 4 の間に、1 メガバイトの空き領域があります。パーティ
ションを 0.1M 離して作成することによって、これを避けられます (この場合、
Parted は自動的にそれらを一緒に「押し込み」ます)。だから、上の例では、変わり
に次を行うべきです:

	(parted) mkpartfs primary ext2 1000.1 2000
	(parted) print
	Disk geometry for /dev/sda: 0.000-6149.882 megabytes
	Disk label type: mac
	Minor    Start       End     Filesystem  Name                  Flags
	1          0.000      0.031              Apple
	2          0.031      1.000                                    boot
	3          1.000   1000.000  ext2        root                  root
	4       1000.000   2000.000  ext2


------------------------------------------------------------------------------
6	ファイル・システム
------------------------------------------------------------------------------

Parted は以下の操作に対するサポートを持っています:

ファイル・システム	検出	作成	大きさ変更	コピー	点検
ext2			*	*	*1		*2	*3
ext3			*		*1		*2	*3
fat			*	*	*4		*4	*
hfs			*
jfs			*
linux-swap		*	*	*		*	*
ntfs			*
reiserfs		*
ufs			*
xfs			*

注:
(1) ext2 と ext3 では、パーティションの開始点は固定されていなければなりません。

(2) コピー先のパーティションは、コピー元のパーティションより大きく (あるいは、
完全に同じサイズ) なければなりません。

(3) ファイル・システムが開かれるときに、限定された点検が行われます。これが
今のところ唯一の点検です。もしファイル・システムに何らかの誤り(そして、一般
に誤りの大半) があれば、(resize を含む) 全てのコマンドはその失敗を上手く処理
し、そのファイル・システムは手付かずのままになります。

(4) fat では、大きさの変更やコピーの後、新しいパーティションの大きさはクラ
スタの大きさに制限されます (主に FAT16 に影響します)。これはあなたが考える
よりも悪くて、というのも、クラスタの大きさを選ぶことはできないからです
(それは Windows のバグですが、互換性は欲しい、そうですよね?)
	だから、実際的には、(Parted はクラスタの大きさを縮小できるので) パー
ティションを常に縮小することができますが、あなたが欲する大きさに、パーティ
ションを増大させることはできないかもしれません。もし FAT32 を使うことに何も
問題がないなら、常にあなたが欲する大きさにパーティションを増大させられるで
しょう。
	要約: いつでもパーティションを縮小できます。もし何らかの理由で FAT32
を使えないなら、パーティションを増大させられないかもしれません。


6.1	Ext2
------------------------------------------------------------------------------
Parted は (まだ) ext2 ファイル・システムのコピーを直接はサポートしていません。
しかしながら、これを為す遂げる方法が少しだけあります:
  * Parted の mkfs コマンド (か mkfs.ext2) を使い、それからシェルで
以下を実行します:
	直してくれ！！ これはあまり上手く行かない - でも大抵の人には大丈夫
	なはず...

	# mount -t ext2 /dev/hda2 /mnt/dst
	# find /mnt/src -depth | cpio -pm /mnt/dst

  * もし複製のパーティションが元よりも大きくなるなら、こうすることもできます:
まず、新しい ext2 パーティションを作成します。それから:

	# dd if=/dev/src-device of=/dev/dst-device bs=1024 count=(OLD SIZE)
	# parted /dev/hda resize 2 (START) (END)

ここで、(OLD SIZE) は元のパーティションをキロバイトで表した大きさです。
(START) と (END) は複製パーティションに対する、新しい開始点と終端です。


6.2	FAT16 と FAT32
------------------------------------------------------------------------------
Parted は (まだ) FAT ファイル・システムのクラスタの大きさを増大させられませ
ん。このことのために、パーティションの大きさの変更やコピーに制限が設けられま
す。これはしばしば全く奇怪で、というのも、Parted は FAT16 と FAT32 のファイ
ル・システムを変換できるからで、クラスタの大きさがどれほどになり得るかについ
て、異なる制限があります。

例えば、クラスタの大きさが 4k である 100Mb のパーティションがあるとしてみま
しょう。このパーティションを 400Mb に変更することはできません。なぜなら、そ
のクラスタの大きさを 16k に変更する必要があるからです。しかし、もし FAT32
を使えば、それは 600Mb に変更することができます。600Mb の FAT32 ファイル・シ
ステムに対して、逆も成り立ちます。

注: ファイル・システムをコピーしたり、大きさを変更するとき、Parted は (もし
可能なら) FAT16 と FAT32 の間で変換したいか尋ねるでしょう。それゆえ、ある
パーティションを (大きさを変更せずに) FAT32 に変換したいだけなら、そのパー
ティションを同じ大きさに変更するだけでできます。

6.2.1	MS DriveSpace パーティション
--------------------------------
MS DriveSpace は MS Windows 95 に付属しているプログラムで、FAT ファイル・
システムを圧縮するのに使用できます。私はこれは DoubleSpace と同じように動作
すると考えているので、ここに書かれていることはどれでも DoubleSpace にも当て
はまるはずです。

これらのパーティションの大きさを変更したりコピーするために Parted を使用する
ことは可能ですが、2、3、余分にやらないといけません...

6.2.1.1	DriveSpace パーティションの増大
--------------------------------------
(1) パーティションを望みの大きさに増大させるのに、Parted の resize コマンド
を使います。

(2) 空き領域をホスト・ドライブから圧縮ドライブへ移すために、MS DriveSpace
を使用します。

6.2.1.2	DriveSpace パーティションの縮小
----------------------------------------
(1) 圧縮ドライブからホスト・ドライブへ空き領域を移すために、MS DriveSpace
を使用します。移される空き領域の量はパーティションを縮小する、望みの量と
一致します。

(2) パーティションを望みの大きさに縮小するために、Parted の resize コマンド
を使用します。注: Parted はそのパーティションをどれだけ縮小するのかが分かる
よう、その数字を上手く返してはくれません。これはやるべきことのリストに挙げ
られています。

6.2.1.3	DriveSpace パーティションのコピー
--------------------------------------
もし DriveSpace パーティションをもっと大きいパーティションにコピーしたいなら、
望みのパーティションの大きさを変えるのではなくコピーすることを除いて、
DriveSpace パーティションの増大用の説明に従ってください。そして、DriveSpace
での新しいパーティションを使っていることを確認してください。

しかし、もし DriveSpace パーティションをより小さなパーティションにコピー
したいなら、物事は少々複雑になります:

(1) 圧縮ドライブから源であるホスト・ドライブに空き領域を移すために、MS
DriveSpace を使います。移される領域の量は元のパーティションと複製パーティ
ションの望みの大きさの差よりも大きくあるべきです。

(2) 元のパーティションを複製のパーティションへコピーするため、Parted を使い
ます。

(3) 元のホスト・ドライブから圧縮ドライブへ空き領域を戻すため、MS DriveSpace
を使います。

(4) 複製ホスト・ドライブから圧縮ドライブへ空き領域を戻すため、MS DriveSpace
を使います。

6.3	Reiserfs
------------------------------------------------------------------------------
Parted は reiserfs をサポートしていません。しかし、reiserfs にはそれ自身の
大きさ変更ツール、resize_reiserfs が付いています。ただあなたの知らせるため
だけに ;-)


------------------------------------------------------------------------------
7	LVM、RAID と直接的なファイル・システムへのアクセス
------------------------------------------------------------------------------

LVM (論理ボリューム・マネージャ) はパーティショニングの代替システムです。それ
は論理ボリューム (つまり、「仮想パーティション」) がたくさんの物理ボリューム
(つまり、ハード・ディスクやパーティション) に広がることを許します。LVM は
Linux バージョン 2.4 かそれ以降でサポートされています。

RAID (安価なディスクの冗長な配列) はたくさんのディスクやパーティションを一緒
に、「仮想パーティション」として使うためのシステムです。ソフトウェア RAID を
利用するのに、数種の異なるモードがあり、本質的には:
  * 性能を向上させ、全領域を単一のファイル・システム上で利用できるようにする
ため、複数の (小さな) ディスクを単一のファイル・システムのために使用。
  * 信頼性と性能を向上させるため、情報の冗長なコピーを収めるのに複数のディス
クを使用。
ソフトウェア RAID は Linux バージョン 2.0 かそれ以降でサポートされています。

ハードウェア RAID はふつうに Parted でサポートされます - だから、もし (ソフ
トウェア RAID に対して) ハードウェア RAID を使っているなら、このセクションを
読む必要はありません。

LVM、ソフトウェア RAID やパーティションはしばしば同時に使用されますが、それら
は全て独立に使われ得ます:
  * LVM とソフトウェア RAID はしばしば、生のハード・ディスクではなく、パー
ティションから成り立ちます。
  * !!! 直してくれ (注: LVM 上で使われた RAID はまだ Linux でサポートされて
いない (?))

GNU Parted は LVM やソフトウェア RAID を完全にはサポートしていませんが、それ
らの個々のツールと組み合わせて使うとき、それでもなお有用です。Parted は以下の
作業に役に立ちます:
  * ソフトウェア RAID や LVM パーティションの作成
  * 論理ボリューム (あるいは、「仮想パーティション」) 上のファイル・システム
の作成、大きさ変更やコピー


7.1	RAID や LVM パーティションの作成
-------------------------------------------------------------------------------

RAID や LVM パーティションを作成するために、以下をしなければなりません:
(1) mkpart コマンドでパーティションを作成します。
(2) そのパーティション上の LVM や RAID フラグを立てます。

例えば:

	(parted) mkpart primary ext2 0 4000
	(parted) set 1 lvm on

注: その LVM や RAID パーティションはまだ使用準備が整っていないでしょう。
それでもやはり、RAID に対しては mkraid(8) を実行したり、物理ボリュームを初期
化したり、論理グループを作成するなどのために、LVM ツールを使う必要があります。


7.2	ソフトウェア RAID や LVM 論理ボリューム上のファイル・システム操作
-------------------------------------------------------------------------------

Parted は RAID や LVM を理解しませんが、RAID や LVM 論理ボリュームを操作する
ことができます。それは Linux の RAID や LVM のサポートを利用します。それゆえ、
あなたの Linux カーネルが RAID や LVM をサポートしている場合に限り、これらの
方法を使えます。

RAID や LVM 論理ボリューム (あるいは、それが重要なら、生のパーティション) 上
のファイル・システムを操作するために、論理ボリューム (パーティション) デバイ
スを選ぶことによって、parted を開始できます。例えば:

	# parted /dev/md0

この章の残りでは、「仮想デバイス」は Parted が編集しているデバイスを指すで
しょう (すぐ上の例では: /dev/md0)。


7.2.1	ファイル・システムの作成
------------------------------
(1) loop ディスク・ラベルを作成します。これは偽のディスク・ラベルで、
Parted に仮想デバイスを単一のファイル・システムとして扱うように教えます。
この偽のディスク・ラベルでは、ゼロ、または、一つのパーティションがあります。

	(parted) mklabel loop

(2) Parted の mkpartfs コマンドを使って、そのファイル・システムを作成します。
そのファイル・システムの開始点をゼロにするべきです。そのパーティションは仮想
デバイス内のどこで終わってもかまいません。仮想デバイスの大きさは print コマ
ンドで見出すことができます。例:

	(parted) print
	Disk geometry for /dev/md0: 0.000-47.065 megabytes
	Disk label type: loop
	Minor    Start       End     Filesystem  Flags
	(parted) mkpartfs primary ext2 0 47.065
	(parted) print
	Disk geometry for /dev/md0: 0.000-47.065 megabytes
	Disk label type: loop
	Minor    Start       End     Filesystem  Flags
	1          0.000     47.065  ext2

7.2.2	ファイル・システムの大きさ変更
------------------------------
通常、仮想デバイスの大きさを変更するのと同じ時に、ファイル・システムの大きさ
を変更します。もしファイル・システムと仮想デバイスの大きさを増大させている
なら、まずそのデバイスを (RAID や LVM ツールで) 増大させるべきで、そしてその
ファイル・システムを増大させます。もしファイル・システムと仮想デバイスを縮小
しているなら、まずそのファイル・システムを縮小させ、そして、その仮想デバイス
を後で行うべきです。

Parted でファイル・システムの大きさを変更するために、resize コマンドを使い
ます。例えば:

	(parted) select /dev/md0
	(parted) resize 1 0 20

7.2.3	仮想デバイスからパーティションへのファイル・システムのコピー
------------------------------------------------------------------
単に cp コマンドを使います。例えば:

	(parted) select /dev/hda
	(parted) cp /dev/md0 1 3

7.2.4	ファイル・システムから仮想デバイスへのファイル・システムのコピー
-------------------------------------------------
(1) 仮想デバイス上に loop ディスク・ラベルを作成します。例えば:

	(parted) select /dev/md0
	(parted) mklabel loop

(2) mkpartfs コマンドを使って、仮想デバイス上にファイル・システムを作成します。
例えば:

	(parted) mkpartfs primary ext2 0 47.065

(3) cp コマンドでパーティションをコピーします:

	(parted) select /dev/hda
	(parted) cp /dev/md0 3 1


------------------------------------------------------------------------------
8	ディスク・イメージング
------------------------------------------------------------------------------

ディスク・イメージングは退屈な Windows のインストール作業を回避するための
手法です。例えば、もし Windows と Office を 1000 マシンにインストールしたい
なら、多分 1000 時間の約 5 倍ぐらいかかるでしょう。GNU/Linux だと、Red Hat
の kickstart のようなプログラムがあるので、そんなにひどくはありません。
そのプログラムは他のプログラムのインストールや、実際的には、あなたがやる
必要のあることを何でも自動化することができます。そのため、ディスク・
イメージングは本当に Windows マシンだけのために使われています。明らかに、
我々は Windows (や、いかなる自由でないソフトウェア) を全く使わないように
勧めていますが、ほとんどの組織では、両方のシステムが利用できる状態にある
移行期を経ることなく、Windows から GNU/Linux (や他のフリーソフトウェア)
に切り換えることができないことを理解しています。

ディスク・イメージングを使えば、ブート・ディスクと CD を挿し込み、それを
飛ばすことによって、Windows と Office を含むパーティションのディスク・イ
メージを CD に焼き、そのパーティションを直接全てのコンピュータのハード・
ディスクにコピーすることができます。しかし Windows のディスク上のパーティ
ションはおそらくもっと大きくなるでしょうから、そのパーティションはまた大
きさを変更されねばならないでしょう。私は何人もの人々がこの処置を Linux の
ブート・フロッピィと Parted を使ってうまく自動化したと聞いています。その
フロッピィを CD 上のブート・イメージとして利用することによって、CDROM だ
けを使うことも可能です。より多くの情報を知るために CD writing HOWTO を読ん
でください。こうしたこと全体を働かせるためにやらないといけない不可思議な
ことが少しあります (それらは次の安定系列で直されるでしょう)。いずれにせよ、
以下が一般的な方法です:

(1) 望みの設定で、あるマシンに Windows をインストールします。640 Mb 以上
使わず、完全な Linux のインストールと CD のイメージ二つ分のコピー用の
1300 Mb のために十分な余地を残す限り、そのパーティションを好きなだけ大きく
して構いません。

(2) そのマシンに Linux をインストールします。

(3) その CD のイメージのためのディレクトリを作ります (例: /root/cdimage/)。

(4) その CD のイメージのディレクトリに 640 Mb のディスク・イメージのファイル
(例: /root/cdimage/diskimage) を作成します:

        # dd if=/dev/zero of=/root/cdimage/diskimage bs=1M count=640

(5) Windows パーティションをディスク・イメージへコピーするため、Parted を
利用します:

        # parted /root/cdimage/diskimage mklabel msdos mkpart primary fat 0 639
	# parted /root/cdimage/diskimage cp /dev/hda 1 1

(6) その CD のイメージのディレクトリから CD イメージを作成し、それをあなた
好みの CD 書き込みツールで CD に焼きます。

(7) 母国語サポートと readline サポートを無効にした、Parted の特別なバージョン
をコンパイルします (あるいは、Freshmeat から特別な RPM をダウンロードします):

        localhost:~/parted-1.0.0# ./configure --disable-nls
        --without-readline --disable-shared; make

(8) Linux のブート・ディスクを作成します (Bootdisk HOWTO を参照)。

(9) そのブート・ディスク (か補充のルート・ディスク) に省略版の Parted を
置きます。

(10) 以下を行うシェル・スクリプトを書きます:

        mount /dev/cdrom /mnt/cdrom
        parted --script /dev/hda mklabel msdos mkpartfs primary fat 0 SOME-SIZE
	parted --script /dev/hda cp /mnt/cdrom/diskimage 1 1
	parted --script /dev/hda set 1 boot on
        /sbin/halt

(11) インストール開始！ そのフロッピィと CD を各コンピュータに挿し込み、
それを回していきます...

明らかに、私はこの方法をずっと簡単にすることができますし、そうするでしょう。
我々はこれを行うのに小型のディストリビューションを作ろうと考えているところ
です。私にはそういうものを管理する時間がありません、有志はいませんか？


------------------------------------------------------------------------------
9	さらなる情報と関連ソフトウェア
------------------------------------------------------------------------------

もしもっとたくさんの情報を発見したら、気軽に parted@gnu.org に質問を送って
ください。(!) はおそらくあなたのディストリビューションに含まれている情報か
ソフトウェアを示しています。

GNU Parted 配布物中のこれらのファイルはさらなる情報を含んでいます:
  * ABOUT-NLS - 母国語サポートの使用と Free Translation Project についての
情報
  * API - libparted の API の解説
  * AUTHORS - 誰が何を書いたか
  * BUGS - 未解決のバグ
  * ChangeLog - GNU Parted になされた変更の履歴
  * COPYING - GNU Parted の配布条件である、GNU General Public License
  * COPYING.DOC - Parted の解説書が配布されてよい条件である、GNU Free
Documentation Licence
  * FAT - FAT の大きさ変更プログラムの動作の仕組に関する情報 (プログラマ用)
  * INSTALL - GNU Parted や 他のほとんどのフリーソフトウェアのコンパイル方法
  * TODO - まだ実装されていない、計画中の特徴

以下の解説書は GNU Parted とは一緒に配布されていませんが、役に立つかも
しれません。これらのうち、ほとんどは多分あなたのディストリビューションに
入っているでしょう。例えば、Red Hat Linux では、CD 上の /doc/HOWTO と
/doc/FAQ を見てください。

[訳注: 多くの LDP ドキュメントは有志の手により日本語に翻訳されており、JF
のページからダウンロードできます:
	http://jf.linux.or.jp/
以下ではオリジナルのURLのままにしておきます。]

  * Filesystems HOWTO   http://penguin.cz/~mhi/fs/
  * Hard Disk Upgrade mini-HOWTO (!):   http://sunsite.unc.edu/LDP/HOWTO
  * Large Disk HOWTO   http://www.win.tue.nl/~aeb/linux/Large-Disk.html
  * LILO mini-HOWTO (!)   http://sunsite.unc.edu/LDP/HOWTO
  * MILO HOWTO (!)   http://sunsite.unc.edu/LDP/HOWTO
  * Linux+OS mini-HOWTOs (!): Linux+DOS+Win95+OS2, Linux+FreeBSD-mini-HOWTO,
Linux+Win95, Linux+FreeBSD, Linux+NT-Loader.  これらは以下から入手できます:
      http://sunsite.unc.edu/LDP/HOWTO
  * Partition mini-HOWTO (!):
      http://www.linuxdoc.org/HOWTO/mini/Partition/index.html
  * Partition Table HOWTO
      http://www.win.tue.nl/~aeb/partitions/partition_tables.html
  * Partition Types list
      http://www.win.tue.nl/~aeb/partitions/partition_types.html
  * Software RAID HOWTO
      http://linas.org/linux/Software-RAID/Software-RAID.html

ここで他の関連したプログラムを挙げます。これらの一部も有用な解説を持って
います:
  * Disk Drake.  www.linux-mandrake.com/diskdrake.  これは Parted と機能的に
類似しています。Disk Drake の FAT コードは我々の Parted のコードを基にしてい
ます。さあ、Disk Drake がどのように Parted に匹敵するか見てみましょう: (我々
両者が同意しています :-) Disk Drake は:

	- 使うのがもっと簡単で、間違いを犯さないように守ってくれます
	- もっと完成度の高い問題解決手法 (/etc/fstab、lilo などを処理します)
	- FAT のサポートはもっと貧弱 (FAT16、FAT32 間で変換できないし、
	  パーティションをコピーできません)
	- ext2 のサポートはもっと貧弱 (今のところは)
	- (旧来の) DOS や Windows システムとの互換性をあんまり考慮してません
	- 非 PC アーキテクチャにはサポートなし

  * dosfsck
  * e2fsck, resize2fs e2fsprogs (!)
  	http://web.mit.edu/tytso/www/linux/e2fsprogs.html
  * ext2resize - Parted と同じコードを使いますが、アンマウントを必要としない、
online ext2 resizer のような、他のいいものをいくつか含んでいます。
	http://ext2resize.sourceforge.net
  * fdisk (!)
  * FIPS (!) (First Interactive Partition Splitter)
      http://www.igd.fhg.de/~aschaefe/fips/
  * GPart - 壊れたパーティション・テーブルを回復させます。
      http://www.stud.uni-hannover.de/user/76201/gpart
  * GNU GRUB - GRand Unified Bootloader
      http://www.gnu.org/software/grub/grub.html
  * LILO (!) (LInux LOader)   ftp://tsx-11.mit.edu/pub/linux/packages/lilo/
  * LVM   http://linux.msede.com/lvm
  * mkdosfs (!)  (ときどき mkfs.msdos と呼ばれます)
  * mke2fs (!)  (ときどき mkfs.ext2 と呼ばれます)
  * mkfs (!)
  * mkswap (!)
  * quik (!)
  * reiserfs: 注: reiserfs の大きさ変更ツールは通常の reiserfs 配布物に含ま
れています。
	http://devlinux.com/projects/reiserfs
  * yaboot (!)  http://ppclinux.apple.com/~benh/

.TH "ARIA2C" "1" "September 02, 2012" "1.15.2" "aria2"
.SH NAME
aria2c \- сверхбыстрая утилита загрузки
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.SH ОБЗОР
.sp
\fBaria2c\fP [<ПАРАМЕТРЫ>] [<URI>|<MAGNET\-ССЫЛКА>|<TORRENT\-ФАЙЛ>|<METALINK\-ФАЙЛ>] ...
.SH ОПИСАНИЕ
.sp
aria2 \- это утилита для загрузки файлов. Поддерживаемые протоколы: HTTP(S),
FTP, BitTorrent и Metalink. Для загрузки файла, aria2 может использовать
разные источники/протоколы и пытается максимально использовать пропускную
способность канала. Есть поддержка загрузки файла по протоколам HTTP(S)/FTP
и BitTorrent одновременно, пока данные загружаются по HTTP(S)/FTP, они тут
же могут выгружаться в BitTorrent\-рой. Используя контрольные суммы блока
данных для Metalink, aria2 автоматически проверяет части данных, которые
загружаются по BitTorrent.
.SH ПАРАМЕТРЫ
.SS Основные параметры
.INDENT 0.0
.TP
.B \-d, \-\-dir=<DIR>
Каталог для сохранения загруженных файлов.
.UNINDENT
.INDENT 0.0
.TP
.B \-i, \-\-input\-file=<FILE>
Загрузить URI, найденные в файле FILE. Вы можете указать несколько URI для одного
объекта: разделяйте URI в строке, используя символ TAB (табуляция). Когда
указано \fB\-\fP, ввод считывается из stdin (стандартный поток ввода). Дополнительные
параметры можно указывать после каждой строки с URI. Эта необязательная строка
должна начинаться с одного или нескольких пробелов и содержать один параметр.
Смотрите подраздел \fI\%Входной файл\fP для детальных пояснений.
Также смотрите параметр \fI\%--deferred-input\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-l, \-\-log=<LOG>
Имя файла для журнала событий. Если указан \fB\-\fP, то журнал событий будет
записан в stdout (стандартный поток вывода). Если указана пустая
строка (""), то журнал событий не будет записан в файл.
.UNINDENT
.INDENT 0.0
.TP
.B \-j, \-\-max\-concurrent\-downloads=<N>
Задать максимальное количество параллельных загрузок для каждого
статического (HTTP/FTP) URI, torrent и metalink. Смотрите также
параметр \fI\%--split\fP.
По умолчанию: \fB5\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-V, \-\-check\-integrity[=true|false]
Проверить целостность файла путем подтверждения хэшей блоков или хэша
полного файла. Этот параметр влияет лишь на BitTorrent, Metalink
или HTTP(S)/FTP загрузки с параметром \fI\%--checksum\fP.
Параметр может обнаружить поврежденные части файла и перезагрузить их.
Если есть хэш полного файла, то проверка выполняется только, когда файл
уже полностью загружен. Момент полной загрузки определяется по размеру файла. Если
проверка хэша завершилась неудачно, то файл будет перезагружен с
нуля. Если есть хэши блоков и хэш полного файла, то будут
использоваться только хэши блоков.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-c, \-\-continue[=true|false]
Продолжить загрузку частично загруженного файла.
Используйте этот параметр, чтобы  возобновить загрузку,
начатую в веб\-браузере или в другой программе, которая загружает
файлы последовательно сначала. Сейчас этот параметр можно
использовать только для HTTP(S)/FTP\-загрузок.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-h, \-\-help[=<TAG>|<KEYWORD>]
Справочное сообщение определяется метками (TAG). Метки начинаются
с \fB#\fP. Например, \fB\-\-help=#http\fP даст справку по параметрам,
помеченным меткой \fB#http\fP. Если задано слово (KEYWORD), не
являющееся меткой, то будет выведена справка по параметрам,
содержащих это слово. Возможные значения: \fB#basic\fP, \fB#advanced\fP,
\fB#http\fP, \fB#https\fP, \fB#ftp\fP, \fB#metalink\fP, \fB#bittorrent\fP, \fB#cookie\fP,
\fB#hook\fP, \fB#file\fP, \fB#rpc\fP, \fB#checksum\fP, \fB#experimental\fP,
\fB#deprecated\fP, \fB#help\fP, \fB#all\fP.
По умолчанию: \fB#basic\fP
.UNINDENT
.SS Параметры HTTP/FTP
.INDENT 0.0
.TP
.B \-\-all\-proxy=<PROXY>
Использовать указанный прокси\-сервер для всех протоколов. Для стирания
ранее определенного адреса используйте "".  Вы можете отменить эту
установку и указать прокси\-сервер для отдельного протокола, используя
параметры \fI\%--http-proxy\fP,
\fI\%--https-proxy\fP и
\fI\%--ftp-proxy\fP. Влияет на все URI.
Формат PROXY \- \fB[http://][ПОЛЬЗОВАТЕЛЬ:ПАРОЛЬ@]ХОСТ[:ПОРТ]\fP.
Смотрите также раздел \fI\%ОКРУЖЕНИЕ\fP.
.IP Note
Если пользователь и пароль вставлены в URI\-прокси и они также указаны в
параметрах \fI\-\-{http,https,ftp,all}\-proxy\-{user,passwd}\fP, то приоритетным
будет самое последнее. Например, у вас \fBhttp\-proxy\-user="myname"\fP,
\fBhttp\-proxy\-passwd="mypass"\fP в aria2.conf и вы указали
\fB\-\-http\-proxy="http://proxy"\fP в командной строке, тогда запрос к HTTP\-прокси
\fBhttp://proxy\fP будет с пользователем \fBmyname\fP и паролем \fBmypass\fP.
.sp
Другой пример: если вы указали в командной строке
\fB\-\-http\-proxy="http://user:pass@proxy" \-\-http\-proxy\-user="myname"
\-\-http\-proxy\-passwd="mypass"\fP, тогда запрос к HTTP\-прокси \fBhttp://proxy\fP
будет с пользователем \fBmyname\fP и паролем \fBmypass\fP.
.sp
Еще один пример: если вы
указали в командной строке \fB\-\-http\-proxy\-user="myname"
\-\-http\-proxy\-passwd="mypass" \-\-http\-proxy="http://user:pass@proxy"\fP, тогда
запрос к HTTP\-прокси \fBhttp://proxy\fP будет с пользователем \fBuser\fP и паролем
\fBpass\fP.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-all\-proxy\-passwd=<PASSWD>
Задать пароль для параметра \fI\%--all-proxy\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-all\-proxy\-user=<USER>
Задать пользователя для параметра \fI\%--all-proxy\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-checksum=<TYPE>=<DIGEST>
Задать контрольную сумму. TYPE \- тип хэша. Поддерживаемые типы хэшей
перечислены в \fBАлгоритмы хэширования\fP при \fBaria2c \-v\fP.
DIGEST \- шестнадцатеричное значение хэша.  Например, указание значения
sha\-1 хэша выглядит так:
\fBsha\-1=0192ba11326fe2298c8cb4de616f4d4140213838\fP
Этот параметр применим только к HTTP(S)/FTP загрузкам.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-connect\-timeout=<SEC>
Задать в соединении время ожидания в секундах для установки
подключения к HTTP/FTP/прокси\-серверу. После установки
подключения этот параметр не имеет значения, и вместо него
используется параметр \fI\%--timeout\fP.
По умолчанию: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dry\-run[=true|false]
Если задано \fBtrue\fP, aria2 только проверяет, является ли удаленный
файл доступным и не загружает данные. Этот параметр влияет на
HTTP/FTP\-загрузку. BitTorrent\-загрузки отменяются, если указано
\fBtrue\fP.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-lowest\-speed\-limit=<SPEED>
Закрывать соединение, если скорость загрузки меньше чем или равна
значению SPEED (байт в секунду). \fB0\fP означает, что aria2 не имеет
нижнего ограничения скорости. Вы можете добавить \fBK\fP или \fBM\fP
(1K = 1024, 1M = 1024K). Этот параметр не влияет на
BitTorrent\-загрузки.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-x, \-\-max\-connection\-per\-server=<NUM>
Максимально количество соединений с одним сервером для каждой
загрузки.
По умолчанию: \fB1\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-file\-not\-found=<NUM>
Если aria2 получает статус "file not found" (файл не найден) с
удаленных HTTP/FTP\-серверов NUM раз без получения, хотя бы одного байта,
тогда принудительно отказывается от загрузки. Укажите \fB0\fP, чтобы
отключить этот параметр. Этот параметр действенен только, когда
используются HTTP/FTP\-серверы.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-m, \-\-max\-tries=<N>
Задать количество попыток. \fB0\fP означает неограниченно.
Смотрите также \fI\%--retry-wait\fP.
По умолчанию: \fB5\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-k, \-\-min\-split\-size=<SIZE>
aria2 не разбивает на части меньше чем 2*SIZE байт. Например,
нужно загрузить файл размером 20МиБ. Если SIZE задать 10M, то
aria2 может разбить файл на части в 2\-ух диапазонах [0\-10МиБ) и
[10МиБ\-20МиБ) и загрузить его, используя 2 источника
(если \fI\%--split\fP >= 2, конечно же).
Если SIZE задать 15M, т.к. 2*15M > 20MiB, aria2 не разобьет файл
на части и загрузит его, используя 1 источник. Вы можете
добавить \fBK\fP или \fBM\fP (1K = 1024, 1M = 1024K). Возможные значения:
\fB1M\fP \-\fB1024M\fP.
По умолчанию: \fB20M\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-n, \-\-no\-netrc[=true|false]
Отключить поддержку netrc. Поддержка netrc по умолчанию
включена.
.IP Note
Файл netrc считывается только при запуске, если \fI\%--no-netrc\fP задан
как \fBfalse\fP. Так что если \fI\%--no-netrc\fP задан как \fBtrue\fP при
загрузке, то netrc недоступен на протяжении всей сессии. Вы не сможете получить
доступ к netrc, даже если отправите \fI\%--no-netrc=false,\fP используя
\fI\%aria2.changeGlobalOption()\fP.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-proxy=<DOMAINS>
Укажите через запятую имена хостов, домены и сетевые адреса
с CIDR\-блоком, или без него, для которых не будет использоваться прокси.
.IP Note
CIDR\-блок (метод IP\-адресации, например 192.168.0.20/24) работает с IPv4\- и
IPv6\-адресами. Текущая реализация не разрешает имена хостов в URI для
сравнения сетевых адресов указанных в
\fI\%--no-proxy\fP. Таким образом, это эффективно, только если в URI есть
IP\-адреса.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-o, \-\-out=<FILE>
Сохранить загруженный файл под указанным именем. Если используется
параметр \fI\%--force-sequential\fP, то данный параметр
игнорируется.
.IP Note
В Metalink или BitTorrent загрузках вы не можете указать имя файла. Имя
файла указывается здесь, только когда используются URI и aria2 с командной
строкой без параметров \fI\%--input-file\fP,
\fI\%--force-sequential\fP. Например:
.sp
.nf
.ft C
$ aria2c \-o myfile.zip "http://mirror1/file.zip" "http://mirror2/file.zip"
.ft P
.fi
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-proxy\-method=<METHOD>
Задать метод для использования в прокси\-запросах. METHOD один
из двух: \fBget\fP или \fBtunnel\fP. HTTPS\-загрузки всегда используют \fBtunnel\fP,
не обращая внимания на этот параметр.
По умолчанию: \fBget\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-R, \-\-remote\-time[=true|false]
Извлекать временную метку файла с удаленного HTTP/FTP\-сервера и,
если это доступно, применить ее к локальному файлу.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-reuse\-uri[=true|false]
Повторно использовать уже использованные URI, если
не осталось неиспользованных URI.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-retry\-wait=<SEC>
Задать в секундах интервал ожидания между повторными попытками.
При SEC > 0, если HTTP\-сервер возвращает ответ 503, aria2 будет
снова пытаться загрузить.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-server\-stat\-of=<FILE>
Указать имя файла, в который сохраняется профиль функционирования
сервера. Вы можете загрузить сохраненные данные, используя параметр
\fI\%--server-stat-if\fP. Формат файла
смотрите ниже в подразделе
\fI\%Профиль функционирования сервера\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-server\-stat\-if=<FILE>
Указать имя файла для загрузки профиля функционирования сервера.
Загруженные данные будут использованы в некоторых URI селекторах, таких
как \fBfeedback\fP. Смотрите также параметр
\fI\%--uri-selector\fP. Формат файла смотрите
ниже в подразделе
\fI\%Профиль функционирования сервера\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-server\-stat\-timeout=<SEC>
Указывает время ожидания в секундах, для того, чтобы сделать
недействительным профиль функционирования сервера, с тех пор,
как состоялся последний контакт с ним.
По умолчанию: \fB86400\fP (24 часа)
.UNINDENT
.INDENT 0.0
.TP
.B \-s, \-\-split=<N>
Загружать файл, используя N соединений. Если задано более чем N URI,
будут использоваться первые N URI, а оставшиеся URI будут в резерве.
Если задано менее чем N URI, то URI будут использованы более одного раза,
так чтобы были задействованы все N соединений одновременно. Количество
соединений к одному и тому же хосту ограничивается параметром
\fI\%--max-connection-per-server\fP.
Смотрите также параметр \fI\%--min-split-size\fP.
По умолчанию: \fB5\fP
.IP Note
Некоторые Metalink регламентируют количество серверов для соединения. aria2
строго соблюдает это. Это значит, что если Metalink определяет атрибут
maxconnections меньше чем N, то aria2 использует значение атрибута
maxconnections вместо N.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stream\-piece\-selector=<SELECTOR>
Указать алгоритм выбора блока, который используется в HTTP/FTP\-загрузке.
Блок \- означает сегмент фиксированной длины, который загружается
параллельно, в  разделенной на части, загрузке. Если задано \fBdefault\fP,
то aria2 выберет блок так, чтобы это уменьшило количество установленных
подключений. Это разумное поведение по умолчанию, поскольку установка
подключения очень затратная операция. Если задано \fBinorder\fP, то aria2
выберет блок, который имеет минимальный индекс. Index=0 означает первый
из файла. Это будет полезно при просмотре фильма, в то время как он
загружается.  Параметр
\fI\%--enable-http-pipelining\fP может
быть полезен для снижения накладных расходов при повторном подключении.
Обратите внимание, что aria2 принимает на обработку параметр
\fI\%--min-split-size\fP, так что необходимо
будет указать разумное значение параметра
\fI\%--min-split-size\fP.
Если задано \fBgeom\fP, то aria2 вначале выберет блок с минимальным
индексом, как при \fBinorder\fP, однако она сохранит
экспоненциально большую область от ранее выбранного блока.
Это уменьшит количество установленных подключений и в то же
время это позволит в первую очередь загрузить начало файла.
Это будет полезно при просмотре фильма, в то время как он
загружается.
По умолчанию: \fBdefault\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-t, \-\-timeout=<SEC>
Задать время ожидания в секундах.
По умолчанию: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-uri\-selector=<SELECTOR>
Указать алгоритм выбора URI. Возможные значения: \fBinorder\fP, \fBfeedback\fP
и \fBadaptive\fP. Если задано \fBinorder\fP, то URI проверяются в порядке
представления в списке URI. Если задано \fBfeedback\fP, aria2 использует
скорость загрузки, которая наблюдалась в предыдущих загрузках, и выбирает
самый быстрый сервер в списке URI. Это также эффективно исключает мертвые
зеркала. Наблюдаемая скорость загрузки является частью профиля
функционирования сервера, упомянутой в параметрах
\fI\%--server-stat-of\fP и
\fI\%--server-stat-if\fP. Если задано \fBadaptive\fP,
выбирается одно из лучших зеркал для первого и резервного соединений.
Дополнительно, возвращаются зеркала, которые пока не были проверены, и,
если каждое из них уже проверено, возвращаются зеркала, которые должны
быть проверены снова. Иначе зеркала больше не выбираются.
Подобно \fBfeedback\fP, используются профиль функционирования сервера.
По умолчанию: \fBfeedback\fP
.UNINDENT
.SS Специфические параметры HTTP
.INDENT 0.0
.TP
.B \-\-ca\-certificate=<FILE>
Использовать сертификат авторизации в FILE для проверки узлов.
Сертификат должен быть в PEM\-формате и содержать многоразовые
CA\-сертификаты. Используйте параметр
\fI\%--check-certificate\fP, чтобы разрешить проверку.
.IP Note
Если вы при сборке используете OpenSSL или последнею версию GnuTLS,
в которой есть функция \fBgnutls_certificate_set_x509_system_trust()\fP,
и библиотека правильно настроена, чтобы найти хранилище общесистемных
CA\-сертификатов, то aria2 автоматически загрузит эти сертификаты
при старте.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-certificate=<FILE>
Использовать клиентский сертификат в FILE. Сертификат
должен быть в PEM\-формате. Вы можете использовать
параметр \fI\%--private-key\fP,
чтобы указать закрытый ключ.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-check\-certificate[=true|false]
Проверять каждый из используемых сертификатов, которые
указаны в параметре \fI\%--ca-certificate\fP.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-accept\-gzip[=true|false]
Посылать \fBAccept: deflate, gzip\fP в запросе\-заголовке и добавлять в ответ,
если удаленный сервер ответит \fBContent\-Encoding: gzip\fP или
\fBContent\-Encoding: deflate\fP.
По умолчанию: \(aqfalse
.IP Note
Некоторые серверы отвечают \fBContent\-Encoding: gzip\fP для файлов, которые сами
по себе сжаты (gzipped). aria2 добавляет их, так или иначе, из\-за заголовка
ответа.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-auth\-challenge[=true|false]
Отправлять заголовок HTTP\-авторизации только тогда, когда он запрошен
с сервера. Если задано \fBfalse\fP, тогда заголовок авторизации всегда
отправляется на сервер. Существует исключение: если имя пользователя
и пароль являются встроенными в URI, то заголовок авторизации всегда
отправляется на сервер, независимо от этого параметра.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-no\-cache[=true|false]
Отправлять заголовок Cache\-Control: no\-cache и Pragma: no\-cache,
чтобы избежать кэширования содержимого. Если задано \fBfalse\fP, то эти
заголовки не посылаются, и вы можете добавить любую директиву к
заголовку Cache\-Control с помощью параметра
\fI\%--header\fP.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-user=<USER>
Задать пользователя для HTTP. Влияет на все URI.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-passwd=<PASSWD>
Задать пароль для HTTP. Влияет на все URI.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-proxy=<PROXY>
Использовать указанный прокси\-сервер для HTTP. Ранее указанный адрес
можно стереть, указав "". Смотрите также параметр
\fI\%--all-proxy\fP. Влияет на все URI.
Формат PROXY \- \fB[http://][ПОЛЬЗОВАТЕЛЬ:ПАРОЛЬ@]ХОСТ[:ПОРТ]\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-proxy\-passwd=<PASSWD>
Задать пароль для параметра \fI\%--http-proxy\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-http\-proxy\-user=<USER>
Задать пользователя для параметра \fI\%--http-proxy\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-https\-proxy=<PROXY>
Использовать указанный прокси\-сервер для HTTPS. Ранее указанный
адрес можно стереть, указав "". Смотрите также параметр
\fI\%--all-proxy\fP. Влияет на все URI.
Формат PROXY \- \fB[http://][ПОЛЬЗОВАТЕЛЬ:ПАРОЛЬ@]ХОСТ[:ПОРТ]\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-https\-proxy\-passwd=<PASSWD>
Задать пароль для параметра \fI\%--https-proxy\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-https\-proxy\-user=<USER>
Задать пользователя для параметра \fI\%--https-proxy\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-private\-key=<FILE>
Использовать закрытый ключ в FILE. Закрытый ключ должен
быть дешифрованным и в PEM\-формате. Режим работы с исходно
зашифрованным закрытым ключом не определен. Смотрите также
параметр \fI\%--certificate\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-referer=<REFERER>
Задать источника запроса. Влияет на все URI.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-http\-keep\-alive[=true|false]
Включить HTTP/1.1 постоянное соединение.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-http\-pipelining[=true|false]
Включить конвейерную обработку HTTP/1.1.
По умолчанию: \fBfalse\fP
.IP Note
С точки зрения производительности, как правило, нет преимущества от
включения этого параметра.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-header=<HEADER>
Добавлять HEADER к HTTP запросу\-заголовку. Вы можете использовать
этот параметр повторно, чтоб указать более одного заголовка:
.sp
.nf
.ft C
$ aria2c \-\-header="X\-A: b78" \-\-header="X\-B: 9J1" "http://host/file"
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B \-\-load\-cookies=<FILE>
Загружать куки\-файл из FILE, используя форматы Firefox3 (SQLite3),
Chromium/Google Chrome (SQLite3) и Mozilla/Firefox(1.x/2.x)/Netscape.
.IP Note
Если aria2 собрана без libsqlite3, то форматы куки\-файлов Firefox3 и
Chromium/Google Chrome не поддерживаются.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-save\-cookies=<FILE>
Сохранить куки в FILE формате Mozilla/Firefox(1.x/2.x)/Netscape.
Если FILE уже существует, то он будет перезаписан. Куки\-сессия также
сохранится, и значение ее окончания будет трактоваться как 0.
Возможные значения: \fB/путь/к/файлу\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-use\-head[=true|false]
Использовать метод HEAD для первого запроса к HTTP серверу.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-U, \-\-user\-agent=<USER_AGENT>
Задать клиентское приложение для HTTP(S)\-загрузок.
По умолчанию: \fBaria2/$VERSION\fP, $VERSION заменяется на версию пакета.
.UNINDENT
.SS Специфические параметры FTP
.INDENT 0.0
.TP
.B \-\-ftp\-user=<USER>
Задать пользователя для FTP.
Влияет на все URI.
По умолчанию: \fBanonymous\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-passwd=<PASSWD>
Задать пароль для FTP. Влияет на все URI. Если имя пользователя
встроено, но пароль отсутствует в URI, то aria2 пытается использовать
пароль из .netrc. Если пароль найден в .netrc, то он используется.
Если нет, используется пароль, указанный в этом параметре.
По умолчанию: \fBARIA2USER@\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-p, \-\-ftp\-pasv[=true|false]
Использовать пассивный режим FTP. Если задано \fBfalse\fP,
то будет использован активный режим.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-proxy=<PROXY>
Использовать указанный прокси\-сервер для FTP. Ранее указанный адрес
можно стереть, указав "". Смотрите также параметр
\fI\%--all-proxy\fP. Влияет на все URI.
Формат PROXY \- \fB[http://][ПОЛЬЗОВАТЕЛЬ:ПАРОЛЬ@]ХОСТ[:ПОРТ]\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-proxy\-passwd=<PASSWD>
Задать пароль для параметра \fI\%--ftp-proxy\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-proxy\-user=<USER>
Задать пользователя для параметра \fI\%--ftp-proxy\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-type=<TYPE>
Задать тип передачи для FTP. TYPE может быть один из
двух: \fBbinary\fP или \fBascii\fP.
По умолчанию: \fBbinary\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftp\-reuse\-connection[=true|false]
Повторно использовать FTP соединение.
По умолчанию: \fBtrue\fP
.UNINDENT
.SS Параметры BitTorrent/Metalink
.INDENT 0.0
.TP
.B \-\-select\-file=<INDEX>...
Задать файл для загрузки по заданному индексу. Вы можете найти
индекс файла, используя параметр \fI\%--show-files\fP.
Составной индекс можно указать, используя \fB,\fP, например: \fB3,6\fP.
Вы можете также использовать \fB\-\fP, чтобы указать диапазон: \fB1\-5\fP.
\fB,\fP и \fB\-\fP могут быть использованы вместе: \fB1\-5,8,9\fP.
Когда используется с параметром \-M, индекс может сильно зависеть
от запроса (смотрите параметры \fI\-\-metalink\-*\fP).
.IP Note
В многофайловом торренте, смежные файлы, указанные в этом параметре также
могут быть загружены. Это не ошибка, а особенность утилиты. Одиночный блок
данных может включать несколько файлов или часть файла, и aria2 запишет блок
данных соответствующего файла.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-S, \-\-show\-files[=true|false]
Вывести список файлов из ".torrent", ".meta4" или ".metalink" и
выйти. Для файла .torrent будет выведена более детальная
информация (информация по хэшу, размер блока и др.).
.UNINDENT
.SS Специфические параметры BitTorrent
.INDENT 0.0
.TP
.B \-\-bt\-enable\-lpd[=true|false]
Включить поиск локальных пиров. Если в torrent\-файле установлен
приватный признак, то aria2 не будет использовать эту возможность,
даже если задано \fBtrue\fP.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-exclude\-tracker=<URI>[,...]
Разделенный запятыми список URI анонса BitTorrent\-трекера,
которые будут исключены. Вы можете использовать специальное
значение \fB*\fP, которое соответствует всем URI, таким образом,
исключаются все URI анонса. При указании \fB*\fP в оболочке
командной строке, не забывайте, экранировать или брать в кавычки.
Смотрите также параметр \fI\%--bt-tracker\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-external\-ip=<IPADDRESS>
Указать внешний IP\-адрес BitTorrent\-трекера для отчета.
Не смотря на то, что эта функция названа \fBexternal\fP (\fBвнешний\fP),
она может принимать любой IP\-адрес. IPADDRESS должен быть числовым
IP\-адресом.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-hash\-check\-seed[=true|false]
Если задано \fBtrue\fP, то после проверки хэша с использованием параметра
\fI\%--check-integrity\fP, и когда файл
загружен полностью, продолжается раздача файла. Если вы хотите
проверить файл и загрузить его только если он поврежден или не загружен
полностью, то задайте этот параметр как \fBfalse\fP. Этот параметр влияет
лишь на BitTorrent\-загрузки.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-lpd\-interface=<INTERFACE>
Использовать для поиска локальных пиров заданный интерфейс. Если этот
параметр не указан, используется интерфейс по умолчанию. Можно указать
имя интерфейса и IP\-адрес. Возможные значения: интерфейс, IP\-адрес.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-max\-open\-files=<NUM>
Указать максимальное количество файлов для открытия в каждой
BitTorrent\-загрузке.
По умолчанию: \fB100\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-max\-peers=<NUM>
Указать максимальное количество узлов для каждого торрента.
\fB0\fP означает неограниченно. Смотрите также параметр
\fI\%--bt-request-peer-speed-limit\fP.
По умолчанию: \fB55\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-metadata\-only[=true|false]
Загрузить только метаданные. Файл(ы), описывающий метаданные не
должен быть загружен. Этот параметр эффективен, только если
используется BitTorrent Magnet\-ссылка. Смотрите также параметр
\fI\%--bt-save-metadata\fP.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-min\-crypto\-level=plain|arc4
Задать минимальный уровень метода шифрования. Если узел поддерживает
несколько методов шифрования, aria2 выбирает наименьший, который
удовлетворяет заданный уровень.
По умолчанию: \fBplain\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-prioritize\-piece=head[=<SIZE>],tail[=<SIZE>]
Пытаться загрузить сначала первую и последнюю части каждого файла.
Это бывает полезно для предварительного просмотра файлов. Аргумент
может содержать 2 ключевых слова: \fBhead\fP и \fBtail\fP. Для включения
обоих, необходимо разделить их запятой. Ключевые слова принимают
один параметр, SIZE. Например, если указано \fBhead=<SIZE>\fP, части, в
пределах первых SIZE байт каждого файла, получат повышенный
приоритет. \fBtail=<SIZE>\fP обозначает диапазон из последних SIZE байт
каждого файла. SIZE может включать букву \fBK\fP или \fBM\fP для обозначения
размера в килобайтах или мегабайтах, соответственно
(1K = 1024, 1M = 1024K). Если SIZE пропущено, то будет использовано
по умолчанию значение: SIZE=1M.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-remove\-unselected\-file[=true|false]
Удалить невыбранные файлы, когда завершена загрузка в
BitTorrent. Чтобы выбрать файлы, используйте параметр
\fI\%--select-file\fP. Если не
использовался этот параметр, то предполагается, что все файлы
выбраны. Пожалуйста, используйте этот параметр внимательно,
так как это фактически удалит файлы с вашего диска.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-require\-crypto[=true|false]
Если задано \fBtrue\fP, aria2 не принимает и не устанавливает соединение с
унаследованным BitTorrent handshake\-сообщением (рукопожатие)
(BitTorrent протокол). Таким образом, aria2 всегда использует обфускацию
handshake\-сообщения.
По  умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-request\-peer\-speed\-limit=<SPEED>
Если итоговая скорость загрузки каждого торрента, ниже чем SPEED,
aria2 временно увеличивает количество узлов, пытаясь увеличить
скорость загрузки. Настройка этого параметра с выбранной вами
скоростью загрузки может, в некоторых случаях, увеличить вашу
скорость загрузки. Вы можете добавить \fBK\fP или \fBM\fP (1K = 1024, 1M = 1024K).
По умолчанию: \fB50K\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-save\-metadata[=true|false]
Сохранить метаданные как файл ".torrent". Этот параметр
эффективен только если используется BitTorrent Magnet\-ссылка.
Имя файла шестнадцатеричное представление хэша с расширением
".torrent". Файл сохранится в каталог, в тот же самый, куда
сохранится загружаемый файл. Если тот же самый файл уже
существует, метаданные не сохранятся. Смотрите также параметр
\fI\%--bt-metadata-only\fP.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-seed\-unverified[=true|false]
Раздавать первоначально загруженные файлы без проверки хэшей блоков.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-stop\-timeout=<SEC>
Остановить BitTorrent загрузку, если скорость загрузки равна 0 на
протяжении SEC секунд. Если задано \fB0\fP, то эта возможность не будет
использоваться.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-tracker=<URI>[,...]
Разделенный запятыми список дополнительных URI анонса
BitTorrent\-трекеров. На эти URI не действует параметр
\fI\%--bt-exclude-tracker\fP,
потому что они добавляются после URI, указанных в параметре
\fI\%--bt-exclude-tracker\fP,
которые исключаются.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-tracker\-connect\-timeout=<SEC>
Задать время ожидания в секундах для установки соединения с трекером.
После установки соединения, это параметр станет не действительным,
а вместо него будет использован
\fI\%--bt-tracker-timeout\fP.
По умолчанию: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-tracker\-interval=<SEC>
Задать интервал в секундах между запросами трекера. Это полностью
отменяет значение интервала и aria2 использует только это значение
и игнорирует минимальный интервал и значение интервала в ответе
трекера. Если задан \fB0\fP, aria2 определяет интервал, основываясь на
ответе трекера и прогрессе загрузки.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bt\-tracker\-timeout=<SEC>
Задать время ожидания в секундах.
По умолчанию: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-entry\-point=<HOST>:<PORT>
Задать хост и порт, как точку входа в IPv4 DHT сеть.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-entry\-point6=<HOST>:<PORT>
Задать хост и порт, как точку входа в IPv6 DHT сеть.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-file\-path=<PATH>
Заменять файл таблицы маршрутизации IPv4 DHT на PATH.
По умолчанию: \fB$HOME/.aria2/dht.dat\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-file\-path6=<PATH>
Заменять файл таблицы маршрутизации IPv6 DHT на PATH.
По умолчанию: \fB$HOME/.aria2/dht.dat\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-listen\-addr6=<ADDR>
Указать адрес привязки сокета для IPv6 DHT. Он должен быть глобальным
IPv6 unicast\-адресом хоста.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-listen\-port=<PORT>...
Задать прослушиваемый UDP\-порт для обоих IPv4 и IPv6 DHT. Несколько портов можно
указать через \fB,\fP, например: \fB6881,6885\fP. Вы также можете использовать \fB\-\fP
чтобы указать диапазон: \fB6881\-6999\fP. \fB,\fP и \fB\-\fP могут быть использованы
вместе.
По умолчанию: \fB6881\-6999\fP
.IP Note
Удостоверьтесь, что указанные порты открыты для входящего UDP\-трафика.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dht\-message\-timeout=<SEC>
Задать время ожидания в секундах.
По умолчанию: \fB10\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-dht[=true|false]
Включить IPv4 DHT функциональность. Если в torrent\-файле задан
приватный признак, aria2 не будет использовать DHT для загрузки,
даже если установлен \fBtrue\fP.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-dht6[=true|false]
Включить IPv6 DHT функциональность. Если в torrent\-файле задан
приватный признак, aria2 не будет использовать DHT для загрузки,
даже если установлен \fBtrue\fP. Используйте параметр
\fI\%--dht-listen-port\fP для указания
прослушиваемого порта. Смотрите также  параметр
\fI\%--dht-listen-addr6\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-peer\-exchange[=true|false]
Включить расширение BitTorrent\-протокола для обмена списками участников.
Если в torrent\-файле задан приватный признак, то эта возможность будет
отключена, даже если установлен \fBtrue\fP.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-follow\-torrent=true|false|mem
Если указать \fBtrue\fP или \fBmem\fP, тогда загруженный файл, расширение
которого \- \fB.torrent\fP или mime\-тип \- \fBapplication/x\-bittorrent\fP,
aria2 анализирует как torrent\-файл и загружает файлы, указанные в нем.
Если указано \fBmem\fP, тогда torrent\-файл не записывается на диск,
а содержится в памяти. Если указано \fBfalse\fP, действия, упомянутые
выше, не совершаются.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-O, \-\-index\-out=<INDEX>=<PATH>
Задать путь к файлу PATH с индексом INDEX. Вы можете найти индекс файла,
используя параметр \fI\%--show-files\fP. PATH
является относительным путем к тому, который указан в параметре
\fI\%--dir\fP. Вы можете использовать этот параметр
много раз. Используйте этот параметр, когда хотите указать имена
выходных файлов для BitTorrent\-загрузок.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-listen\-port=<PORT>...
Задать номер TCP\-порта для BitTorrent\-загрузок. Несколько портов можно
указать, используя \fB,\fP, например: \fB6881,6885\fP. Вы также можете
использовать \fB\-\fP, чтобы указать диапазон: \fB6881\-6999\fP. \fB,\fP и \fB\-\fP
могут быть использованы вместе: \fB6881\-6889,6999\fP.
По умолчанию: \fB6881\-6999\fP
.IP Note
Удостоверьтесь, что указанные порты открыты для входящего TCP\-трафика.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-overall\-upload\-limit=<SPEED>
Задать максимальную общую скорость отдачи в байтах/сек.
\fB0\fP значит неограниченно. Вы можете добавить
\fBK\fP или \fBM\fP (1K = 1024, 1M = 1024K). Чтобы ограничить скорость
отдачи для узла торрента, используйте параметр
\fI\%--max-upload-limit\fP.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-u, \-\-max\-upload\-limit=<SPEED>
Задать максимальную скорость отдачи каждого узла торрента в байтах/сек.
\fB0\fP значит неограниченно. Вы можете добавить
\fBK\fP или \fBM\fP (1K = 1024, 1M = 1024K). Чтобы ограничить
общую скорость отдачи, используйте параметр
\fI\%--max-overall-upload-limit\fP.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-peer\-id\-prefix=<PEER_ID_PREFIX>
Указать префикс для ID узла. ID узла в BitTorrent
имеет размер 20 байт. Если будет указано более 20 байт,
то только первые 20 будут использоваться, если будет
указано меньше 20, то они будут дополнены случайными
данными до 20 байт.
По умолчанию: \fBaria2/$VERSION\fP, $VERSION заменяется на версию пакета.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-seed\-ratio=<RATIO>
Указать рейтинг. Сидировать завершенные торренты, пока рейтинг
не станет больше RATIO. Очень рекомендуется указать тут равный
или больший \fB1.0\fP. Указать \fB0.0\fP, если вы планируете сидировать
независимо от рейтинга. Если указан параметр
\fI\%--seed-time\fP вместе с этим
параметром, сидирование закончится тогда, когда хотя бы одно
условие будет удовлетворено.
По умолчанию: \fB1.0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-seed\-time=<MINUTES>
Указать время сидирования (раздачи) в минутах.
Смотрите также параметр \fI\%--seed-ratio\fP.
.IP Note
Указанный \fI\%--seed-time=0\fP отключает
сидирование после завершения загрузки.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-T, \-\-torrent\-file=<TORRENT_FILE>
Путь к файлу ".torrent". Вы не обязаны использовать этот параметр, т.к.
файл ".torrent" можно указать без \fI\%--torrent-file\fP.
.UNINDENT
.SS Специфические параметры Metalink
.INDENT 0.0
.TP
.B \-\-follow\-metalink=true|false|mem
Если указано \fBtrue\fP или \fBmem\fP и когда загруженный файл имеет расширение
\fB.meta4\fP или \fB.metalink\fP, или mime\-тип \fBapplication/metalink4+xml\fP
или \fBapplication/metalink+xml\fP, aria2 считает его metalink\-файлом и
загружает упомянутые в нем файлы. Если указано \fBmem\fP, то metalink\-файл
не сохраняется на диск, а просто хранится в памяти. Если указано \fBfalse\fP,
то вышеприведенная операция не производится.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-base\-uri=<URI>
Указать основной URI для разрешения относительных URI в элементе
metalink:url и metalink:metaurl в metalink\-файле, сохраненном на
локальном диске. Если URI указывает на каталог, то URI должен
заканчиваться на \fB/\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-M, \-\-metalink\-file=<METALINK_FILE>
Путь к файлу ".meta4" и ".metalink". Читает ввод из stdin, если в качестве
имени файла указано \fB\-\fP. Вы не обязаны использовать этот параметр,
т.к. файлы .metalink можно указать без \fI\%--metalink-file\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-language=<LANGUAGE>
Язык файла для загрузки.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-location=<LOCATION>[,...]
Местонахождение предпочитаемого сервера. Список, разделенный запятыми,
допустимых местонахождений, например, \fBjp,us\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-os=<OS>
Целевая операционная система файла для загрузки.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-version=<VERSION>
Версия файла для загрузки.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-preferred\-protocol=<PROTO>
Указать предпочитаемый протокол. Возможные значения: \fBhttp\fP, \fBhttps\fP, \fBftp\fP
и \fBnone\fP. Указать \fBnone\fP для отключения этой возможности.
По умолчанию: \fBnone\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metalink\-enable\-unique\-protocol[=true|false]
Если задано \fBtrue\fP, а в metalink\-файле доступно несколько
протоколов, то aria2 использует один из них. Используйте параметр
\fI\%--metalink-preferred-protocol\fP,
чтобы указать предпочитаемый протокол.
По умолчанию: \fBtrue\fP
.UNINDENT
.SS Параметры RPC
.INDENT 0.0
.TP
.B \-\-enable\-rpc[=true|false]
Включить JSON\-RPC/XML\-RPC\-сервер. Настоятельно рекомендуется указать
имя пользователя и пароль, используя параметры
\fI\%--rpc-user\fP и \fI\%--rpc-passwd\fP.
Смотрите также параметр \fI\%--rpc-listen-port\fP.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-pause[=true|false]
Приостановка загрузки после добавления. Этот параметр действенен
только, когда задан \fI\%--enable-rpc=true.\fP
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-allow\-origin\-all[=true|false]
Добавить заголовок Access\-Control\-Allow\-Origin со значением \fB*\fP в RPC\-ответе.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-listen\-all[=true|false]
Слушать входящие JSON\-RPC/XML\-RPC\-запросы на всех сетевых интерфейсах.
Если указано \fBfalse\fP, слушать только на локальном петлевом
интерфейсе (loopback).
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-listen\-port=<PORT>
Указать номер порта, для прослушивания JSON\-RPC/XML\-RPC\-сервером.
Возможные значения: \fB1024\fP \-\fB65535\fP.
По умолчанию: \fB6800\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-max\-request\-size=<SIZE>
Задать максимальный размер JSON\-RPC/XML\-RPC\-запроса.
Если aria2 выявит запрос с размером большим, чем SIZE байт,
тогда соединение будет отклонено.
По умолчанию: \fB2M\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-passwd=<PASSWD>
Задать JSON\-RPC/XML\-RPC пароль.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rpc\-user=<USER>
Задать JSON\-RPC/XML\-RPC пользователя.
.UNINDENT
.SS Дополнительные параметры
.INDENT 0.0
.TP
.B \-\-allow\-overwrite[=true|false]
Повторно запустить загрузку с нуля, если соответствующий контрольный
файл отсутствует. Смотрите также параметр
\fI\%--auto-file-renaming\fP.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-allow\-piece\-length\-change[=true|false]
Если задано \fBfalse\fP, aria2 прерывает загрузку, когда длина блока
отлична от той, которая находится в контрольном файле. Если задано
\fBtrue\fP, вы можете продолжать, однако некоторый прогресс загрузки
будет потерян.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-always\-resume[=true|false]
Всегда возобновлять загрузку. Если задано \fBtrue\fP, aria2 всегда пытается
возобновить загрузку и если это не возможно, прерывает ее.
Если задано \fBfalse\fP, тогда для всех заданных URI не поддерживается
возобновление загрузки, или aria2 столкнется с невозможностью
возобновления загрузки URI \fBN\fP\-ое количество раз
(значение \fBN\fP указывается в параметре \fI\%--max-resume-failure-tries\fP,
то aria2 будет загружать файл с нуля. Смотрите параметр
\fI\%--max-resume-failure-tries\fP.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-async\-dns[=true|false]
Включить асинхронный DNS.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-async\-dns\-server=<IPADDRESS>[,...]
Разделенный запятыми список адресов DNS\-серверов, которые используют
асинхронный DNS\-преобразователь. Обычно асинхронный DNS\-преобразователь
читает адреса DNS\-серверов из \fB/etc/resolv.conf\fP. Когда используется
этот параметр, то используются DNS\-серверы, указанные в параметре вместо
указанных в \fB/etc/resolv.conf\fP. Вы можете указать оба IPv4 и IPv6 адреса.
Этот параметр полезен, когда в системе нет \fB/etc/resolv.conf\fP и у
пользователя нет прав на его создание.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-auto\-file\-renaming[=true|false]
Переименовать файл, если такой уже существует.
Этот параметр работает только для HTTP(S)/FTP\-загрузок.
К имени файла будет добавлена точка и число от 1 до 9999.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-auto\-save\-interval=<SEC>
Сохранять контрольный файл (*.aria2) каждые SEC секунд.
Если задано \fB0\fP, тогда контрольный файл не сохраняется на
протяжении загрузки. aria2 сохраняет контрольный файл тогда,
когда останавливается, не смотря на значение.
Возможные значения: от \fB0\fP до \fB600\fP.
По умолчанию: \fB60\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-conditional\-get[=true|false]
Загружать файл только когда локальный файл старше, чем удаленный.
Эта функция работает только для HTTP(S)\-загрузок. Это не работает,
если размер файла указан в Metalink. Это также игнорирует заголовок
Content\-Disposition. Если контрольный файл существует, то этот
параметр игнорируется. Эта функция использует заголовок
If\-Modified\-Since, как условие для получения только нового файла.
При получении времени модификации локального файла, используется
указанное пользователем имя файла
(см. параметр \fI\%--out\fP) или часть имени файла в
URI, если \fI\%--out\fP не указан. Для перезаписи
существующего файла необходим параметр
\fI\%--allow-overwrite\fP.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-conf\-path=<PATH>
Сменить путь к файлу конфигурации на PATH.
По умолчанию: \fB$HOME/.aria2/aria2.conf\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-D, \-\-daemon[=true|false]
Запустить как демон (фоновый процесс). Текущий рабочий каталог
будет заменен на \fB/\fP, а стандартный ввод, стандартный вывод,
стандартный вывод ошибок будут перенаправлены на \fB/dev/null\fP.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-deferred\-input[=true|false]
Если задано \fBtrue\fP, aria2 при запуске не считывает все URI и параметры
из файла, указанного в параметре \fI\%--input-file\fP, а
считывает их позже отдельно, когда это нужно. Это может сократить
использование памяти, если во входном файле содержится много URI для
загрузки. Если задано \fBfalse\fP, aria2 при запуске считывает все URI
и параметры.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-disable\-ipv6[=true|false]
Отключить IPv6. Это полезно, если вы используете поврежденный DNS
и хотите избежать ужасно медленного поиска AAAA\-записи.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-download\-result=<OPT>
Этот параметр изменяет формат сообщения \fBРезультаты загрузки\fP. Если OPT
задан как \fBdefault\fP, то отображается GID, статус, средняя скорость загрузки и
путь/URI. Если загружается множество файлов, то отобразиться путь/URI первого
запрашиваемого файла, а остальные пропускаются. Если OPT задан как \fBfull\fP,
то отображается GID, статус, средняя скорость загрузки, процент прогресса и
путь/URI.  Процент прогресса и путь/URI отобразиться для каждого
запрашиваемого файла в отдельной строке.
По умолчанию: \fBdefault\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-async\-dns6[=true|false]
Включить IPv6 разрешение имен в асинхронном DNS\-преобразователе.
Этот параметр будет игнорироваться, если
\fI\%--async-dns=false.\fP
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-enable\-mmap[=true|false]
Отображение файлов в память. Этот параметр может не работать,
если место под файл предварительно не выделено.
Смотрите \fI\%--file-allocation\fP.
.sp
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-event\-poll=<POLL>
Указать метод опроса событий. Возможные значения: \fBepoll\fP, \fBkqueue\fP,
\fBport\fP, \fBpoll\fP и \fBselect\fP. Каждый метод \fBepoll\fP, \fBkqueue\fP, \fBport\fP и
\fBpoll\fP доступен, если система поддерживает его.  \fBepoll\fP доступен в
современных дистрибутивах Linux. \fBkqueue\fP доступен в различных
*BSD\-системах, включая Mac OS X. \fBport\fP доступен в Open Solaris.
Значение по умолчанию может изменяться в зависимости от системы,
которую вы используете.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-file\-allocation=<METHOD>
Указать метод резервирования места для файла. \fBnone\fP не происходит
предварительное резервирование места для файла. \fBprealloc\fP \- предварительное
резервирование места для файла перед началом загрузки. Это может
продолжаться некоторое время, в зависимости от размера файла. Если вы
используете новые файловые системы, наподобие ext4 (с поддержкой экстентов),
btrfs, xfs или NTFS (только MinGW\-сборка) тогда лучше выбрать \fBfalloc\fP.
Так как они резервируют место под большие (на несколько Гигабайт) файлы
почти мгновенно. Не используйте \fBfalloc\fP вместе с наследными файловыми
системами, такими как ext3 и FAT32, потому что это будет продолжаться
почти столько же времени, как и \fBprealloc\fP, а также полностью заблокирует
aria2, пока не закончится резервирование места. \fBfalloc\fP может быть
недоступным, если ваша система не содержит функцию \fIposix_fallocate(3)\fP.
\fBtrunc\fP использует системный вызов \fIftruncate(2)\fP или
специфичный для конкретной платформы эквивалент, чтобы усечь файл до указанной
длины.
.sp
Возможные значения: \fBnone\fP, \fBprealloc\fP, \fBtrunc\fP, \fBfalloc\fP
По умолчанию: \fBprealloc\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-hash\-check\-only[=true|false]
Если задано \fBtrue\fP, то после проверки хэша, используя параметр
\fI\%--check-integrity\fP, загрузка прервётся, в любом
случае загрузка завершится.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-human\-readable[=true|false]
Выводить на консоль размеры и скорость в удобочитаемом формате
(например, 1.2Ки, 3.4Ми).
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-interface=<INTERFACE>
Привязать сокеты к заданному интерфейсу. Вы можете указать имя
интерфейса, IP\-адрес и имя хоста. Возможные значения: имя
интерфейса (например, eth0), IP\-адрес (например, 192.168.0.12),
имя хоста (например, myhost).
.IP Note
Если интерфейс имеет несколько адресов, то настоятельно рекомендуется
указать IP\-адрес явно. Смотрите также
\fI\%--disable-ipv6\fP. Если ваша система не имеет \fIgetifaddrs(3)\fP, это
параметр не принимает имя интерфейса.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-download\-result=<NUM>
Задать максимальное количество результатов загрузок, которые находятся
в памяти. Результаты загрузок \- завершенные/ошибка/удаленные загрузки.
Результаты загрузок хранятся FIFO очереди, в которой может хранится NUM
результатов загрузок. Когда очередь заполнена и появляется новый
результат загрузки, то старейший результат загрузки удаляется из начала
очереди, а новый добавляется в конец. Указание большого числа в этом
параметре может привести к высокому потреблению памяти после тысяч
загрузок. Значение 0 отключит сохранение результата загрузки.
По умолчанию: \fB1000\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-resume\-failure\-tries=<N>
Если параметр \fI\%--always-resume=false,\fP aria2
загрузит файл с нуля, при обнаружении \fBN\fP \-го URI, не поддерживающего
возобновление. Если \fBN\fP =\(ga\(ga0\(ga\(ga, то aria2 загрузит файл с нуля, когда все
URI не поддерживают возобновление. Смотрите параметр
\fI\%--always-resume\fP.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-log\-level=<LEVEL>
Задать уровень вывода журнала событий. LEVEL может
быть: \fBdebug\fP, \fBinfo\fP, \fBnotice\fP, \fBwarn\fP или \fBerror\fP.
По умолчанию: \fBdebug\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-bt\-download\-complete=<COMMAND>
Для BitTorrent, в \fI\%--on-download-complete\fP
указывается команда, которая вызывается после завершение загрузки и окончания
сидирования. С другой стороны, этот параметр определяет команду, которая
будет выполнена после завершения загрузки, но до сидирования.
Смотрите раздел \fI\%Перехват сообщения\fP для более подробной
информации о COMMAND. Возможные значения: \fB/путь/к/команде\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-complete=<COMMAND>
Задать команду, которая будет выполнена после завершения загрузки.
Смотрите раздел \fI\%Перехват сообщения\fP для более
подробной информации о COMMAND. Смотрите также параметр
\fI\%--on-download-stop\fP.
Возможные значения: \fB/путь/к/команде\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-error=<COMMAND>
Задать команду, которая будет выполнена после того, как загрузка будет
прервана из\-за ошибки. Смотрите раздел \fI\%Перехват сообщения\fP
для более подробной информации о COMMAND. Смотрите также параметр
\fI\%--on-download-stop\fP. Возможные
значения: \fB/путь/к/команде\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-pause=<COMMAND>
Задать команду, которая будет выполнена после того, как
загрузка будет приостановлена. Смотрите раздел
\fI\%Перехват сообщения\fP для более подробной
информации о COMMAND. Возможные значения: \fB/путь/к/команде\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-start=<COMMAND>
Задать команду, которая будет выполнена после того, как
началась загрузка. Смотрите раздел \fI\%Перехват сообщения\fP
для более подробной информации о COMMAND. Возможные
значения: \fB/путь/к/команде\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-on\-download\-stop=<COMMAND>
Задать команду, которая будет выполнена после того, как загрузка
остановлена. Вы можете изменить команду, которая будет выполнятся
при определенном результате загрузки, используя параметры
\fI\%--on-download-complete\fP и \fI\%--on-download-error\fP.
Если они указаны, то команда, определенная в этом параметре не
будет выполнятся. Смотрите раздел \fI\%Перехват сообщения\fP
для более подробной информации о COMMAND. Возможные
значения: \fB/путь/к/команде\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-piece\-length=<LENGTH>
Задать длину блока для HTTP/FTP\-загрузок. Это является границей, когда
aria2 разделяет файл на части. Все разделения происходят многократно по
этой длине. Этот параметр будет игнорироваться при BitTorrent\-загрузках.
Также будет игнорироваться, если Metalink\-файл содержит хэши блоков.
По умолчанию: \fB1M\fP
.IP Note
Возможный вариант использования параметра
\fI\%--piece-length\fP \- изменение диапазона запроса в одном конвейерном
HTTP\-запросе. Для включения конвейерной обработки HTTP используйте
\fI\%--enable-http-pipelining\fP.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-console\-readout[=true|false]
Показывать консольный вывод.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-summary\-interval=<SEC>
Задать интервал в секундах до вывода сообщения о прогрессе
загрузки. Установка \fB0\fP запрещает вывод.
По умолчанию: \fB60\fP
.IP Note
В загрузках многофайлового торрента, по определенным смежным файлам также,
которые размещены в части одного блока.
.RE
.UNINDENT
.INDENT 0.0
.TP
.B \-Z, \-\-force\-sequential[=true|false]
Получить URI в последовательности командной строки и загрузить каждое
URI в отдельной сессии, как в обычных утилитах загрузки командной
строки.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-overall\-download\-limit=<SPEED>
Задать максимальную общую скорость загрузки в байтах/сек. \fB0\fP значит
неограниченно. Вы можете добавить \fBK\fP или \fBM\fP (1K = 1024, 1M = 1024K).
Чтобы ограничить скорость загрузки для узла, используйте параметр
\fI\%--max-download-limit\fP.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-download\-limit=<SPEED>
Установить максимальную скорость каждого узла загрузки в байтах/сек. \fB0\fP
значит неограниченно. Вы можете добавить \fBK\fP или \fBM\fP (1K = 1024, 1M = 1024K).
Чтобы ограничить общую скорость загрузки, используйте параметр
\fI\%--max-overall-download-limit\fP.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-conf[=true|false]
Отключить загрузку файла aria2.conf.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-file\-allocation\-limit=<SIZE>
Не резервируется место для файлов, размер которых меньше SIZE.
Вы можете добавить \fBK\fP или \fBM\fP (1K = 1024, 1M = 1024K).
По умолчанию: \fB5M\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-P, \-\-parameterized\-uri[=true|false]
Включить поддержку параметризованных URI. Вы можете указать набор
частей: \fBhttp://{sv1,sv2,sv3}/foo.iso\fP. Также вы можете указать
числовую последовательность с шагом
счетчика: \fBhttp://host/image[000\-100:2].img\fP. Шагом счетчика
можно пренебречь. Если все URI не указывают на такой же файл, как
во втором приведенном выше примере, то необходим  параметр \-Z.
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-q, \-\-quiet[=true|false]
Сделать aria2 молчаливой (без консольного вывода).
По умолчанию: \fBfalse\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-realtime\-chunk\-checksum[=true|false]
Подтверждать правильность блока данных путем вычисления контрольной суммы
во время загрузки файла, если предусмотрена контрольная сумма блоков.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-remove\-control\-file[=true|false]
Удалять контрольный файл перед загрузкой. При использовании с
\fI\%--allow-overwrite=true\fP файл
всегда загружается с нуля. Это может понадобиться пользователям
за прокси\-сервером, не поддерживающим возобновление загрузки.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-save\-session=<FILE>
Сохранять ошибочные/незаконченные загрузки в FILE при выходе. Вы можете
передать этот выходной файл aria2c с параметром  \fI\%--input-file\fP при
перезапуске. Обратите внимание, что загрузки, добавленные через RPC\-методы
\fI\%aria2.addTorrent()\fP, \fI\%aria2.addMetalink()\fP и чьи метаданные не могут
быть сохранены как файл, не будут сохраняться.
Загрузки, удаленные с использованием \fI\%aria2.remove()\fP и
\fI\%aria2.forceRemove()\fP не будут сохранены.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stop=<SEC>
Останавливать программу после того как пройдет
SEC секунд. Если задано \fB0\fP, эта возможность будет
отключена.
По умолчанию: \fB0\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stop\-with\-process=<PID>
Остановить приложение, когда процесс с идентификационный номером PID
не работает. Это полезно, если процесс aria2 запущен из родительского
процесса. Родительский процесс может запустить aria2 со своим
идентификационным номером и когда он (процесс) завершиться по какой\-то
причине, aria2 может обнаружить это и самостоятельно завершиться.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-truncate\-console\-readout[=true|false]
Укорачивать консольный вывод, чтобы он поместился в
одну строку.
По умолчанию: \fBtrue\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-v, \-\-version
Вывести номер версии, информацию об авторских
правах, конфигурации и выйти.
.UNINDENT
.SS Параметры, которые принимают аргументы
.sp
Параметры, которые имеют значения в квадратных скобках ([]), могут принимать
дополнительные (необязательные) аргументы. Обычно отсутствие аргумента
эквивалентно \fBtrue\fP. Если вы используется короткую форму параметров
(например, \fB\-V\fP) и указываете аргумент, то имя параметра и его аргумент
должны быть объедены (например, \fB\-Vfalse\fP). Если будут вставлены пробелы
между именем параметра и аргументом, то аргумент будет обрабатываться как
URI, и это не то, что обычно вы ожидаете.
.SS URI, MAGNET\-ССЫЛКА, TORRENT\-ФАЙЛ, METALINK\-ФАЙЛ
.sp
Вы можете перечислить несколько URI в командной строке. Пока вы не указали
параметр \fI\%--force-sequential\fP, все URI должны указывать на один
и тот же файл или загрузка завершиться не удачно.
.sp
Вы можете указать произвольное количество BitTorrent Magnet URI. Обратите
внимание, что они всегда будут обрабатываться как отдельная
загрузка. Поддерживаются оба Info Hash (Информация о хэше), как
закодированный 40 шестнадцатеричными символами, так и закодированный 32
символами Base32\-кодировки. Поддерживаются составные параметры
\fBtr\fP. Т.к. в BitTorrent Magnet URI возможно присутствие символа \fB&\fP, то
настоятельно рекомендуется всегда заключать URI в одиночные(\fB\(aq\fP) или
двойные(\fB"\fP)  кавычки. Так же настоятельно рекомендуется включить DHT,
особенно когда параметр \fBtr\fP не указан. Смотрите
\fI\%http://www.bittorrent.org/beps/bep_0009.html\fP для детальной информации по
BitTorrent Magnet URI.
.sp
Вы также можете указать произвольное количество torrent\-файлов и
Metalink\-документов, которые хранятся на локальном диске. Обратите внимание,
что они всегда будут обрабатываться как отдельная загрузка. Поддерживаются
оба формата: Metalink4 и Metalink версии 3.0.
.sp
Вы можете указать вместе, torrent\-файл с параметром \-T и URI. Сделав это, вы
можете загружать файл, используя torrent\-рой и HTTP(S)/FTP\-сервер
одновременно, пока данные из HTTP(S)/FTP выгружаются в torrent\-рой. Для
однофайловых торрентов, URI может быть завершенным, который указывает на
ресурс, или же если заканчиваться символом /, тогда name (имя) в
torrent\-файле будет добавлено. Для многофайловых торентов, name (имя) и path
(путь) в torrent\-файле будут добавлены из URI для каждого файла.
.IP Note
Удостоверьтесь, что URI заключен в одинарные(\(aq) или двойные(\fB"\fP) кавычки, если
есть символ \fB&\fP или любые символы, которые имеют особое значение в командной
оболочке.
.RE
.SS Возобновление загрузки
.sp
Обычно, вы можете возобновить передачу, только запустив ту же самую команду
(aria2c URI), которая выполнялась при предыдущей передаче, созданной aria2.
.sp
Если предыдущая передача создана веб\-браузером или wget\-подобным менеджером
загрузки, тогда используйте параметр \fI\%--continue\fP для
продолжения передачи.
.SS Перехват сообщения
.sp
aria2 предоставляет параметры, в которых указываются произвольные команды,
выполняемые после наступления определенного события. В настоящее время
доступны следующие параметры:
\fI\%--on-bt-download-complete\fP,
\fI\%--on-download-pause\fP,
\fI\%--on-download-complete\fP,
\fI\%--on-download-start\fP,
\fI\%--on-download-error\fP,
\fI\%--on-download-stop\fP.
.sp
aria2 передает 3 аргумента указанной команды, которая выполняется. Это
аргументы: GID, количество файлов и путь к файлу. Для HTTP\-, FTP\-загрузок,
обычно количество файлов \- 1. BitTorrent загрузка может содержать множество
файлов. Если число файлов больше чем один, то путь к файлу будет для
первого. Другими словами, это значение параметра path в первой структуре,
определенный параметр которой имеет значение true (истина), в ответе
RPC\-метода \fI\%aria2.getFiles()\fP. Если вы хотите получить все пути к
файлам, то рассмотрите использование JSON\-RPC/XML\-RPC. Обратите внимание,
что путь к файлу может меняться в процессе загрузки по HTTP из\-за
перенаправления или заголовка Content\-Disposition.
.sp
Посмотрите пример, как аргументы передаются команде:
.sp
.nf
.ft C
$ cat hook.sh
#!/bin/sh
echo "Called with [$1] [$2] [$3]"
$ aria2c \-\-on\-download\-complete hook.sh http://example.org/file.iso
Called with [1] [1] [/path/to/file.iso]
.ft P
.fi
.SH КОДЫ ЗАВЕРШЕНИЯ
.sp
Поскольку aria2 может обрабатывать несколько загрузок одновременно, она
сталкивается с множеством ошибок в сессии. aria2 возвращает следующий код
завершения, основанный на последней встретившейся ошибке.
.INDENT 0.0
.TP
.B 0
Если все загрузки завершились успешно.
.TP
.B 1
Если произошла неизвестная ошибка.
.TP
.B 2
Если время истекло.
.TP
.B 3
Если ресурс не был найден.
.TP
.B 4
Если aria2 получила определенное число ошибок "ресурс не найден". Смотрите
параметр \fI\%--max-file-not-found\fP.
.TP
.B 5
Если загрузка прервана, поскольку скорость загрузки была слишком
медленной. Смотрите параметр
\fI\%--lowest-speed-limit\fP.
.TP
.B 6
Если произошла проблема с сетью.
.TP
.B 7
Если были не завершенные загрузки. Эта ошибка только появляется, только если
все завершенные загрузки были успешны и были не завершенные загрузки в
очереди, когда aria2 завершилась по нажатию \fBCtrl\-C\fP пользователем или при
отправке сигнала TERM или INT.
.TP
.B 8
Если удаленный сервер не поддерживает возобновление, когда оно было указано
как обязательное для завершения загрузки.
.TP
.B 9
Если было не достаточно доступного места на диске.
.TP
.B 10
Если размер блока был отличным от указанного контрольном .aria2\-файле.
Смотрите параметр \fI\%--allow-piece-length-change\fP.
.TP
.B 11
Если aria2 был загружен один и тот же файл в тот момент.
.TP
.B 12
Если aria2 загрузила торрент с одним и тем же хэшем в этот момент.
.TP
.B 13
Если файл уже существует. Смотрите параметр
\fI\%--allow-overwrite\fP.
.TP
.B 14
Если не удалось переименование. Смотрите параметр
\fI\%--auto-file-renaming\fP.
.TP
.B 15
Если aria2 не смогла открыть существующий файл.
.TP
.B 16
Если aria2 не смогла создать новый файл или обрезать существующий файл.
.TP
.B 17
Если произошла ошибка чтения/записи файла.
.TP
.B 18
Если aria2 не смогла создать каталог.
.TP
.B 19
Если не удалось разрешение имен (DNS).
.TP
.B 20
Если aria2 не смогла проанализировать Metalink\-документ.
.TP
.B 21
Если FTP\-команда не удалась.
.TP
.B 22
Если HTTP\-заголовок ответа был испорчен или неожиданным.
.TP
.B 23
Если произошло слишком много перенаправлений.
.TP
.B 24
Если HTTP\-авторизация не удалась.
.TP
.B 25
Если aria2 не смогла проанализировать закодированный файл (обычно
файл ".torrent").
.TP
.B 26
Если файл ".torrent" был испорчен или потеряна информация, которая необходима
aria2.
.TP
.B 27
Если Magnet\-ссылка была плохой.
.TP
.B 28
Если был задан плохой/неопознанный параметр или неожиданный аргумент к нему.
.TP
.B 29
Если удаленный сервер не смог обработать запрос из\-за временной перегрузки
или регламентных работ.
.TP
.B 30
Если aria2 не смогла проанализировать JSON\-RPC\-запрос.
.UNINDENT
.IP Note
Ошибка, произошедшая в завершенной загрузке, не будет передана как код
завершения.
.RE
.SH ОКРУЖЕНИЕ
.sp
aria2 распознает следующие переменные окружения.
.INDENT 0.0
.TP
.B \fBhttp_proxy [http://][ПОЛЬЗОВАТЕЛЬ:ПАРОЛЬ@]ХОСТ[:ПОРТ]\fP
Указать прокси\-сервер для использования в HTTP. Заменяет значение http\-proxy
в конфигурационном файле. Параметр
\fI\%--http-proxy\fP в командной строке заменяет эту переменную.
.TP
.B \fBhttps_proxy [http://][ПОЛЬЗОВАТЕЛЬ:ПАРОЛЬ@]ХОСТ[:ПОРТ]\fP
Указать прокси\-сервер для использования в HTTPS. Заменяет значение
https\-proxy в конфигурационном файле. Параметр
\fI\%--https-proxy\fP в командной строке заменяет эту переменную.
.TP
.B \fBftp_proxy [http://][ПОЛЬЗОВАТЕЛЬ:ПАРОЛЬ@]ХОСТ[:ПОРТ]\fP
Указать прокси\-сервер для использования в FTP. Заменяет значение ftp\-proxy в
конфигурационном файле. Параметр \fI\%--ftp-proxy\fP в
командной строке заменяет эту переменную.
.TP
.B \fBall_proxy [http://][ПОЛЬЗОВАТЕЛЬ:ПАРОЛЬ@]ХОСТ[:ПОРТ]\fP
Указать прокси\-сервер для использования, если не указан конкретный протокол
для прокси. Заменяет значение all\-proxy в конфигурационном файле. Параметр
\fI\%--all-proxy\fP в командной строке заменяет эту
переменную.
.UNINDENT
.IP Note
Не смотря на то, что aria2 допускает \fBftp://\fP и \fBhttps://\fP схемы прокси в URI,
она просто предполагает, что определен \fBhttp://\fP и не меняет своего поведения,
основанного на определенной схеме.
.RE
.INDENT 0.0
.TP
.B \fBno_proxy [ДОМЕН,...]\fP
Указать, разделенные запятыми, имена хостов, доменов и сетевых адресов с
CIDR\-блоком, или без него, для которых прокси использоваться не
будет. Заменяет значение no\-proxy в конфигурационном файле. Параметр
\fI\%--no-proxy\fP в командной строке заменяет эту
переменную.
.UNINDENT
.SH ФАЙЛЫ
.SS aria2.conf
.sp
По умолчанию, aria2 анализирует \fB$HOME/.aria2/aria2.conf\fP как
конфигурационный файл. Вы можете указать путь к конфигурационному файлу в
параметре \fI\%--conf-path\fP. Если вы не хотите использовать
конфигурационный файл, используйте параметр \fI\%--no-conf\fP.
.sp
Конфигурационный файл \- это текстовый файл, содержащий один параметр в
строке. В каждой строке, вы можете указать пары имя\-значение в формате:
ИМЯ=ЗНАЧЕНИЕ, где имя \- это длинный параметр командной строки, без префикса
\fB\-\-\fP. Вы можете использовать тот же синтаксис, что и для параметра
командной строки. Строки начинающиеся с \fB#\fP рассматриваются как
комментарии:
.sp
.nf
.ft C
# sample configuration file for aria2c
listen\-port=60000
dht\-listen\-port=60000
seed\-ratio=1.0
max\-upload\-limit=50K
ftp\-pasv=true
.ft P
.fi
.IP Note
Конфиденциальная информация такая как пользователь/пароль могут быть
включены в конфигурационный файл. Рекомендуется изменить режим доступа
к конфигурационному файлу (например, \fBchmod 600 aria2.conf\fP), так
другие пользователи не смогут увидеть содержимое файла.
.RE
.SS dht.dat
.sp
By default, the routing table of IPv4 DHT is saved to the path
\fB$HOME/.aria2/dht.dat\fP and the routing table of IPv6 DHT is saved to the
path \fB$HOME/.aria2/dht6.dat\fP.
.SS Netrc
.sp
Поддержка Netrc включена по умолчанию для HTTP(S)/FTP. Для отключения
поддержки netrc, укажите параметр \fI\%--no-netrc\fP. Ваш файл .netrc
должен иметь соответствующие права (600).
.sp
Если имя машины (machine) начинается с \fB.\fP, то aria2 выполняет доменное
сопоставление вместо точного соответствия. Это расширение aria2. Пример
доменного сопоставления, представьте себе следующие содержимое .netrc:
.sp
.nf
.ft C
machine .example.org login myid password mypasswd
.ft P
.fi
.sp
Домен \fBaria2.example.org\fP сопоставляется с \fB.example.org\fP и используется
\fBmyid\fP и \fBmypasswd\fP.
.sp
Примеры некоторых доменных сопоставлений: домен \fBexample.net\fP не
сопоставим с \fB.example.org\fP. Домен \fBexample.org\fP не сопоставим
\fB.example.org\fP из\-за предшествующей \fB.\fP. Если вы хотите соответствия
\fBexample.org\fP, то точно укажите \- \fBexample.org\fP.
.SS Контрольный файл
.sp
aria2 использует контрольный файл для отслеживания прогресса
загрузки. Контрольный файл размещается в том же каталоге, что и загружаемый
файл, и имеет имя, как у загружаемого файла с добавлением
\fB.aria2\fP. Например, если file.zip загружаемый файл, тогда контрольный файл
будет file.zip.aria2. (Существует исключение для этого именования. При
загрузке торрента с множеством файлов, контрольный файл будет в "корневом
каталоге" с именем торрента и добавлением \fB.aria2\fP. Имя "корневого
каталога" \- значение ключа "name" в "info" внутри torrent\-файла.)
.sp
Обычно контрольный файл удаляется после завершения загрузки. Если aria2
решает, что загрузка не может быть возобновлена (например, когда загружается
файл с HTTP\-сервера, который не поддерживает возобновление), контрольный
файл не создается.
.sp
Обычно, если вы потеряете контрольный файл, вы не сможете возобновить
загрузку. Но если у вас есть torrent или metalink файлы с контрольными
суммами блоков данных, вы сможете возобновить загрузку без контрольного
файла, указав параметр \-V в командной строке aria2c.
.SS Входной файл
.sp
Входной файл может содержать список URI для загрузки aria2. Вы можете
указать несколько URI для одного объекта, разделяя URI, в одной строке,
табуляцией.
.sp
Каждая строка рассматривается, как аргумент командой строки. Следовательно,
на них влияют параметры \fI\%--force-sequential\fP и
\fI\%--parameterized-uri\fP.
.sp
Так как aria2 непосредственно читает URI из входного файла, то они не должны
быть указаны с одинарными(\(aq) или двойными(") кавычками.
.sp
Строка, которая начинается с \fB#\fP обрабатывается как комментарий и
пропускается.
.sp
Кроме того, следующие параметры могут быть определены после каждой строки с
URI. Эти дополнительные строки должны начинаться с пробела(ов).
.INDENT 0.0
.INDENT 2.0
.IP \(bu 2
\fI\%all-proxy\fP
.IP \(bu 2
\fI\%all-proxy-passwd\fP
.IP \(bu 2
\fI\%all-proxy-user\fP
.IP \(bu 2
\fI\%allow-overwrite\fP
.IP \(bu 2
\fI\%allow-piece-length-change\fP
.IP \(bu 2
\fI\%always-resume\fP
.IP \(bu 2
\fI\%async-dns\fP
.IP \(bu 2
\fI\%auto-file-renaming\fP
.IP \(bu 2
\fI\%bt-enable-lpd\fP
.IP \(bu 2
\fI\%bt-exclude-tracker\fP
.IP \(bu 2
\fI\%bt-external-ip\fP
.IP \(bu 2
\fI\%bt-hash-check-seed\fP
.IP \(bu 2
\fI\%bt-max-open-files\fP
.IP \(bu 2
\fI\%bt-max-peers\fP
.IP \(bu 2
\fI\%bt-metadata-only\fP
.IP \(bu 2
\fI\%bt-min-crypto-level\fP
.IP \(bu 2
\fI\%bt-prioritize-piece\fP
.IP \(bu 2
\fI\%bt-remove-unselected-file\fP
.IP \(bu 2
\fI\%bt-request-peer-speed-limit\fP
.IP \(bu 2
\fI\%bt-require-crypto\fP
.IP \(bu 2
\fI\%bt-save-metadata\fP
.IP \(bu 2
\fI\%bt-seed-unverified\fP
.IP \(bu 2
\fI\%bt-stop-timeout\fP
.IP \(bu 2
\fI\%bt-tracker\fP
.IP \(bu 2
\fI\%bt-tracker-connect-timeout\fP
.IP \(bu 2
\fI\%bt-tracker-interval\fP
.IP \(bu 2
\fI\%bt-tracker-timeout\fP
.IP \(bu 2
\fI\%check-integrity\fP
.IP \(bu 2
\fI\%checksum\fP
.IP \(bu 2
\fI\%conditional-get\fP
.IP \(bu 2
\fI\%connect-timeout\fP
.IP \(bu 2
\fI\%continue\fP
.IP \(bu 2
\fI\%dir\fP
.IP \(bu 2
\fI\%dry-run\fP
.UNINDENT
.INDENT 2.0
.IP \(bu 2
\fI\%enable-async-dns6\fP
.IP \(bu 2
\fI\%enable-http-keep-alive\fP
.IP \(bu 2
\fI\%enable-http-pipelining\fP
.IP \(bu 2
\fI\%enable-mmap\fP
.IP \(bu 2
\fI\%enable-peer-exchange\fP
.IP \(bu 2
\fI\%file-allocation\fP
.IP \(bu 2
\fI\%follow-metalink\fP
.IP \(bu 2
\fI\%follow-torrent\fP
.IP \(bu 2
\fI\%ftp-passwd\fP
.IP \(bu 2
\fI\%ftp-pasv\fP
.IP \(bu 2
\fI\%ftp-proxy\fP
.IP \(bu 2
\fI\%ftp-proxy-passwd\fP
.IP \(bu 2
\fI\%ftp-proxy-user\fP
.IP \(bu 2
\fI\%ftp-reuse-connection\fP
.IP \(bu 2
\fI\%ftp-type\fP
.IP \(bu 2
\fI\%ftp-user\fP
.IP \(bu 2
\fI\%hash-check-only\fP
.IP \(bu 2
\fI\%header\fP
.IP \(bu 2
\fI\%http-accept-gzip\fP
.IP \(bu 2
\fI\%http-auth-challenge\fP
.IP \(bu 2
\fI\%http-no-cache\fP
.IP \(bu 2
\fI\%http-passwd\fP
.IP \(bu 2
\fI\%http-proxy\fP
.IP \(bu 2
\fI\%http-proxy-passwd\fP
.IP \(bu 2
\fI\%http-proxy-user\fP
.IP \(bu 2
\fI\%http-user\fP
.IP \(bu 2
\fI\%https-proxy\fP
.IP \(bu 2
\fI\%https-proxy-passwd\fP
.IP \(bu 2
\fI\%https-proxy-user\fP
.IP \(bu 2
\fI\%index-out\fP
.IP \(bu 2
\fI\%lowest-speed-limit\fP
.IP \(bu 2
\fI\%max-connection-per-server\fP
.IP \(bu 2
\fI\%max-download-limit\fP
.IP \(bu 2
\fI\%max-file-not-found\fP
.UNINDENT
.INDENT 2.0
.IP \(bu 2
\fI\%max-resume-failure-tries\fP
.IP \(bu 2
\fI\%max-tries\fP
.IP \(bu 2
\fI\%max-upload-limit\fP
.IP \(bu 2
\fI\%metalink-base-uri\fP
.IP \(bu 2
\fI\%metalink-enable-unique-protocol\fP
.IP \(bu 2
\fI\%metalink-language\fP
.IP \(bu 2
\fI\%metalink-location\fP
.IP \(bu 2
\fI\%metalink-os\fP
.IP \(bu 2
\fI\%metalink-preferred-protocol\fP
.IP \(bu 2
\fI\%metalink-version\fP
.IP \(bu 2
\fI\%min-split-size\fP
.IP \(bu 2
\fI\%no-file-allocation-limit\fP
.IP \(bu 2
\fI\%no-netrc\fP
.IP \(bu 2
\fI\%no-proxy\fP
.IP \(bu 2
\fI\%out\fP
.IP \(bu 2
\fI\%parameterized-uri\fP
.IP \(bu 2
\fI\%pause\fP
.IP \(bu 2
\fI\%piece-length\fP
.IP \(bu 2
\fI\%proxy-method\fP
.IP \(bu 2
\fI\%realtime-chunk-checksum\fP
.IP \(bu 2
\fI\%referer\fP
.IP \(bu 2
\fI\%remote-time\fP
.IP \(bu 2
\fI\%remove-control-file\fP
.IP \(bu 2
\fI\%retry-wait\fP
.IP \(bu 2
\fI\%reuse-uri\fP
.IP \(bu 2
\fI\%seed-ratio\fP
.IP \(bu 2
\fI\%seed-time\fP
.IP \(bu 2
\fI\%select-file\fP
.IP \(bu 2
\fI\%split\fP
.IP \(bu 2
\fI\%stream-piece-selector\fP
.IP \(bu 2
\fI\%timeout\fP
.IP \(bu 2
\fI\%uri-selector\fP
.IP \(bu 2
\fI\%use-head\fP
.IP \(bu 2
\fI\%user-agent\fP
.UNINDENT
.UNINDENT
.sp
Эти параметры имеют точно такой же смысл, что параметры командной строки, но
это применимо только к URI, к которым они принадлежат. Обратите внимание,
что параметры во входном файле не должны иметь префикс \fB\-\-\fP.
.sp
Например, такое содержимое uri.txt:
.sp
.nf
.ft C
http://server/file.iso http://mirror/file.iso
  dir=/iso_images
  out=file.img
http://foo/bar
.ft P
.fi
.sp
Если aria2 выполняется с параметрами \fB\-i uri.txt \-d /tmp\fP, а загрузка
происходит с http://server/file.iso и http://mirror/file.iso, то
\fBfile.iso\fP сохранится как \fB/iso_images/file.img\fP. Файл \fBbar\fP
загрузится с \fI\%http://foo/bar\fP и сохранится как \fB/tmp/bar\fP.
.sp
В некоторых случаях, параметр \fI\%out\fP не имеет никакого
эффекта. Смотрите примечание по ограничениям параметра \fI\%--out\fP.
.SS Профиль функционирования сервера
.sp
Этот раздел описывает формат профиля функционирования сервера. Это открытый
текстовый файл, каждая строка которого имеет несколько пар ИМЯ=ЗНАЧЕНИЕ,
разделенных запятыми. В настоящее время распознаются следующие ИМЕНА:
.INDENT 0.0
.TP
.B \fBhost\fP
Хост\-имя сервера. Обязательно.
.TP
.B \fBprotocol\fP
Протокол для этого профиля, такие как ftp, http. Обязательно.
.TP
.B \fBdl_speed\fP
Средняя скорость загрузки, которая наблюдалась при предыдущей загрузке, в
байт/секунду. Обязательно.
.TP
.B \fBsc_avg_speed\fP
Средняя скорость загрузки, которая наблюдалась при предыдущей загрузке, в
байт/секунду. Это значение обновляется, только если загрузка произведена при
одном соединении и только с использованием
AdaptiveURISelector. Необязательно.
.TP
.B \fBmc_avg_speed\fP
Средняя скорость загрузки, которая наблюдалась при предыдущей загрузке, в
байт/секунду. Это значение обновляется, только если загрузка произведена при
нескольких соединениях и только с использованием
AdaptiveURISelector. Необязательно.
.TP
.B \fBcounter\fP
Сколько раз использовался сервер. В настоящее время это значение
используется только при AdaptiveURISelector. Необязательно.
.TP
.B \fBlast_updated\fP
Время связи, в GMT, с этим сервером, указывается в секундах, начиная с
00:00:00 1 Января, 1970, UTC. Обязательно.
.TP
.B \fBstatus\fP
ERROR, когда сервер не доступен из\-за неисправности или тайм\-аута. Иначе \-
OK.
.UNINDENT
.sp
Эти поля должны быть в одной строке. Последовательность полей не имеет
значения. Вы можете размещать пары, отличные от перечисленных выше; они
будут просто игнорироваться.
.sp
Например, следующим образом:
.sp
.nf
.ft C
host=localhost, protocol=http, dl_speed=32000, last_updated=1222491640, status=OK
host=localhost, protocol=ftp, dl_speed=0, last_updated=1222491632, status=ERROR
.ft P
.fi
.SH RPC-ИНТЕРФЕЙС
.sp
aria2 обеспечивает JSON\-RPC через HTTP и XML\-RPC через HTTP, они в основном
имеют одинаковые функции. aria2 также обеспечивает JSON\-RPC через
WebSocket. JSON\-RPC через WebSocket использует тот же самый метод сигнатур и
формат ответа как у JSON\-RPC через HTTP, но дополнительно имеет сервер,
инициирующий уведомления. Смотрите подробности в разделе \fI\%JSON-RPC через
WebSocket\fP.
.sp
Путь запроса к JSON\-RPC\-интерфейсу (для через HTTP и через WebSocket) \-
\fB/jsonrpc\fP. Путь запроса к XML\-RPC\-интерфейсу \- \fB/rpc\fP.
.sp
WebSocket URI для JSON\-RPC через WebSocket является
\fBws://HOST:PORT/jsonrpc\fP.
.sp
Реализованный JSON\-RPC основан на спецификации JSON\-RPC 2.0
<\fI\%http://jsonrpc.org/specification\fP> и поддерживает HTTP POST и GET
(JSONP). Использование WebSocket как транспорта является начальным
расширением aria2.
.sp
JSON\-RPC\-интерфейс не поддерживает уведомления в HTTP, но RPC\-сервер будет
отправлять уведомления в WebSocket. Он также не поддерживает числа с
плавающей точкой. Символы должны быть в кодировке UTF\-8.
.sp
В следующем документе о JSON\-RPC, описана структура JSON\-объекта.
.SS Терминология
.INDENT 0.0
.TP
.B GID
GID (или gid) \- это ключ, для управления каждой загрузкой. Каждая загрузка
имеет уникальный GID. В настоящее время GID представлен как целое число, но
обрабатывается как не целое число, т.к. он может быть изменен на другой тип
в будущих версиях. Обратите внимание, что GID существует в локальной сессии
и не сохраняется при завершении работы aria2.
.UNINDENT
.SS Методы
.sp
Весь код в примерах написан на Python2.7.
.INDENT 0.0
.TP
.B aria2.addUri(uris[, options[, position]])
Этот метод добавляет новый HTTP(S)/FTP/BitTorrent Magnet URI. Параметр
\fIuris\fP имеет тип массив, элемент которого имеет тип строка и содержит
URI. Для BitTorrent Magnet URI, \fIuris\fP должен содержать только один элемент,
и он должен быть BitTorrent Magnet URI. URI в параметре \fIuris\fP должны
указывать на один и тот же файл. Если вы смешивайте другие URI, указывающие
на другой файл, то aria2 не сообщит об этом, но и загрузка может неудачно
завершаться. Параметр \fIoptions\fP имеет тип структура, элементы которой
являются парой имя и значение. Смотрите ниже \fI\%Параметры\fP для более
подробной информации. Если параметр \fIposition\fP задан как целое число,
начиная с 0, то новая загрузка будет вставлена на позицию \fIposition\fP в
очередь ожидания. Если параметр \fIposition\fP не задан или больше чем размер
очереди, то загрузка будет добавлена в конец очереди. Этот метод
возвращает GID зарегистрированной загрузки.
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример добавляет http://example.org/file в aria2:
.sp
.nf
.ft C
>>> import urllib2, json
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.addUri\(aq,
\&...                       \(aqparams\(aq:[[\(aqhttp://example.org/file\(aq]]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> c.read()
\(aq{"id":"qwer","jsonrpc":"2.0","result":"1"}\(aq
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример добавляет http://example.org/file в aria2:
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.addUri([\(aqhttp://example.org/file\(aq])
\(aq1\(aq
.ft P
.fi
.sp
Следующий пример добавляет два источника и некоторые параметры:
.sp
.nf
.ft C
>>> s.aria2.addUri([\(aqhttp://example.org/file\(aq, \(aqhttp://mirror/file\(aq],
                    dict(dir="/tmp"))
\(aq2\(aq
.ft P
.fi
.sp
Следующий пример добавляет загрузку и вставляет ее перед ожидающими
загрузками:
.sp
.nf
.ft C
>>> s.aria2.addUri([\(aqhttp://example.org/file\(aq], {}, 0)
\(aq3\(aq
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.addTorrent(torrent[, uris[, options[, position]]])
Этот метод добавляет BitTorrent\-загрузку путем загрузки .torrent\-файла. Если
вы хотите добавить BitTorrent Magnet URI, взамен используйте метод
\fI\%aria2.addUri()\fP. Параметр \fItorrent\fP имеет тип
base64, с содержанием Base64\-кодировки
в .torrent\-файле. Параметр \fIuris\fP имеет тип массив, элемент которого имеет тип строка и содержит URI.
Параметр \fIuris\fP используется для Web\-сидирования. Для однофайловых
торрентов, URI может быть завершенным, который указывает на ресурс, или же
если заканчиваться символом /, тогда будет добавлено имя из
torrent\-файла. Для многофайловых торентов, имя и путь в торренте будут
добавлены из URI для каждого файла. Параметр \fIoptions\fP имеет тип структура,
элементы которой являются парой имя и значение. Смотрите ниже
\fI\%Параметры\fP для более подробной информации. Если
параметр \fIposition\fP задан как целое число, начиная с 0, то новая загрузка
будет вставлена на позицию \fIposition\fP в очередь ожидания. Если параметр
\fIposition\fP не задан или больше чем размер очереди, то загрузка будет
добавлена в конец очереди. Этот метод возвращает GID зарегистрированной
загрузки. Загруженные данные сохраняются в файл с именем шестнадцатеричной
строки SHA\-1\-хэша этих данных плюс ".torrent", в каталог указанный в
параметре \fI\%--dir\fP. Например, имя файла
0a3893293e27ac0490424c06de4d09242215f0a6.torrent. Если этот файл существует,
то он будет перезаписан. Если файл не может быть успешно сохранен, то
загрузки, добавленные этим методом, не сохраняются при помощи параметра
\fI\%--save-session\fP.
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример добавляет локальный файл file.torrent в aria2:
.sp
.nf
.ft C
>>> import urllib2, json, base64
>>> torrent = base64.b64encode(open(\(aqfile.torrent\(aq).read())
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqasdf\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.addTorrent\(aq, \(aqparams\(aq:[torrent]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> c.read()
\(aq{"id":"asdf","jsonrpc":"2.0","result":"6"}\(aq
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример добавляет локальный файл file.torrent в aria2:
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.addTorrent(xmlrpclib.Binary(open(\(aqfile.torrent\(aq).read()))
\(aq6\(aq
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.addMetalink(metalink[, options[, position]])
Этот метод добавляет Metalink\-загрузку путем загрузки .metalink\-файла.
Параметр \fImetalink\fP имеет тип base64, с содержанием
Base64\-кодировки в .metalink\-файле. Параметр \fIoptions\fP имеет тип структура,
элементы которой являются парой имя\-значение. Смотрите ниже
\fI\%Параметры\fP для более подробной информации. Если
параметр \fIposition\fP задан как целое число, начиная с 0, то новая загрузка
будет вставлена на позицию \fIposition\fP в очередь ожидания. Если параметр
\fIposition\fP не задан или больше чем размер очереди, то загрузка будет
добавлена в конец очереди. Этот метод возвращает GID зарегистрированной
загрузки. Загруженные данные сохраняются в файл с именем шестнадцатеричной
строки SHA\-1\-хэша этих данных плюс ".metalink", в каталог указанный в
параметре \fI\%--dir\fP. Например, имя файла
0a3893293e27ac0490424c06de4d09242215f0a6.metalink. Если этот файл
существует, то он будет перезаписан. Если файл не может быть успешно
сохранен, то загрузки, добавленные этим методом, не сохраняются при помощи
параметра \fI\%--save-session\fP.
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример добавляет локальный файл file.meta4 в aria2:
.sp
.nf
.ft C
>>> import urllib2, json, base64
>>> metalink = base64.b64encode(open(\(aqfile.meta4\(aq).read())
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.addMetalink\(aq, \(aqparams\(aq:[metalink]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> c.read()
\(aq{"id":"qwer","jsonrpc":"2.0","result":["8"]}\(aq
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример добавляет локальный файл file.meta4 в aria2:
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.addMetalink(xmlrpclib.Binary(open(\(aqfile.meta4\(aq).read()))
[\(aq8\(aq]
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.remove(gid)
Этот метод удаляет загрузку, которая обозначена \fIgid\fP. Параметр \fIgid\fP имеет
тип строка. Если указана загрузка, которая загружается в данный момент, то
сначала она остановится. Статус удаления станет \fB"removed"\fP (удаленно). Этот
метод возвращает GID удаленной загрузки.
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример удаляет загрузку, GID которой "3":
.sp
.nf
.ft C
>>> import urllib2, json
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.remove\(aq, \(aqparams\(aq:[\(aq3\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> c.read()
\(aq{"id":"qwer","jsonrpc":"2.0","result":"3"}\(aq
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример удаляет загрузку, GID которой "3":
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.remove(\(aq3\(aq)
\(aq3\(aq
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.forceRemove(gid)
Этот метод удаляет загрузку, которая обозначена \fIgid\fP. Метод действует
подобно \fI\%aria2.remove()\fP, за исключением того, что
метод удаляет загрузку без каких\-либо действий, которые требует времени,
например связь с BitTorrent\-трекером.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.pause(gid)
Этот метод приостанавливает загрузку, которая обозначена \fIgid\fP. Параметр
\fIgid\fP имеет тип строки. Статус приостановки станет \fB"paused"\fP
(приостановлено). Если загрузка активна, то загрузка переместится на первую
позицию в очередь ожидания. Пока статус \fB"paused"\fP, загрузка не начнется. Для
смены статуса на \fB"waiting"\fP, используйте метод
\fI\%aria2.unpause()\fP. Этот метод возвращает GID приостановленной загрузки.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.pauseAll()
Этот метод эквивалентен по вызову \fI\%aria2.pause()\fP,
для каждой активной/ожидающей закачки. Этот метод возвращает \fB"OK"\fP, в случае
успеха.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.forcePause(pid)
Этот метод приостанавливает загрузку, которая обозначена \fIgid\fP. Метод
действует подобно \fI\%aria2.pause()\fP, за исключением
того, что метод приостанавливает загрузку без каких\-либо действий, которые
требует времени, например связь с BitTorrent\-трекером.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.forcePauseAll()
Этот метод эквивалентен по вызову
\fI\%aria2.forcePause()\fP, для каждой активной/ожидающей закачки. Этот метод
возвращает \fB"OK"\fP, в случае успеха.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.unpause(gid)
Этот метод изменяет статус загрузки, которая обозначена \(aqgid\(aq, с \fB"paused"\fP на
\fB"waiting"\fP. Это позволяет перезапускать загрузку. Значение ключа \fIgid\fP имеет
тип строки. Этот метод возвращает GID, снятой с паузы, загрузки.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.unpauseAll()
Этот метод эквивалентен по вызову
\fI\%aria2.unpause()\fP, для каждой активной/ожидающей закачки. Этот метод
возвращает \fB"OK"\fP, в случае успеха.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.tellStatus(gid[, keys])
Этот метод возвращает состояние загрузки, которая обозначена \fIgid\fP. Параметр
\fIgid\fP имеет тип строка. Параметр \fIkeys\fP имеет тип массив строк. Если \fIkeys\fP
указан, то ответ содержит определенные значения в массиве \fIkeys\fP. Если
\fIkeys\fP пустой или не указан, то ответ содержит все значения. Это полезно,
если вы хотите использовать определенные параметры, чтобы исключить
множество пересылок. Например,
\fBaria2.tellStatus("1", ["gid", "status"])\fP возвратит \fIgid\fP и
\(aqstatus\(aq. Ответ имеет тип структура и содержит следующие поля. Поле имеет
тип строка.
.INDENT 7.0
.TP
.B \fBgid\fP
GID этой загрузки.
.TP
.B \fBstatus\fP
\fB"active"\fP \- загружаемая/сидируемая в данный момент. \fB"waiting"\fP \- ожидающая в
очереди; загрузка не началась. \fB"paused"\fP \- приостановленная. \fB"error"\fP \-
остановленная, т.к. произошла ошибка. \fB"complete"\fP \- остановленная и
завершенная загрузка. \fB"removed"\fP \- удаленная пользователем загрузка.
.TP
.B \fBtotalLength\fP
Общий объем загрузки в байтах.
.TP
.B \fBcompletedLength\fP
Загруженный объем загрузки в байтах.
.TP
.B \fBuploadLength\fP
Выгруженный объем загрузки в байтах.
.TP
.B \fBbitfield\fP
Шестнадцатеричное представление процесса загрузки. Старший бит соответствует
блоку с индексом 0. Бит устанавливается, если блок доступен и не
устанавливается, если блок отсутствует. Запасные биты в конце
устанавливаются в 0. Если загрузка еще не начался, этот значение не будет
включено в ответ.
.TP
.B \fBdownloadSpeed\fP
Скорость загрузки в байт/сек.
.TP
.B \fBuploadSpeed\fP
Скорость выгрузки в байт/сек.
.TP
.B \fBinfoHash\fP
Информация о хэше (InfoHash). Только для BitTorrent.
.TP
.B \fBnumSeeders\fP
Количество сидов, к которым подключен клиент. Только для BitTorrent.
.TP
.B \fBpieceLength\fP
Размер блока в байтах.
.TP
.B \fBnumPieces\fP
Количество блоков.
.TP
.B \fBconnections\fP
Количество пиров/серверов, к которым подключен клиент.
.TP
.B \fBerrorCode\fP
Последний код ошибки, которая произошла при загрузке. Значение имеет тип
строки. Коды ошибок определены в разделе \fI\%КОДЫ ЗАВЕРШЕНИЯ\fP. Это значение доступно
только для остановленных/завершенных загрузок.
.TP
.B \fBfollowedBy\fP
Список с GID, которые сгенерированы в результате запуска этой
загрузки. Например, когда aria2 загружает Metalink\-файл, то это генерирует
загрузки, описанные в нем (см. параметр
\fI\%--follow-metalink\fP). Это значение полезно для отслеживания автоматически
сгенерированных загрузок. Если таких загрузок нет, то значение не будет
включено в ответ.
.TP
.B \fBbelongsTo\fP
GID родительской загрузки. Некоторые загрузки являются частью другой
загрузки. Например, если файл в Metalink содержит BitTorrent\-ответ, загрузка
".torrent" будет частью этого файла. Если эта загрузка не имеет родительской
загрузки, то значение не будет включено в ответ.
.TP
.B \fBdir\fP
Каталог для сохранения файлов. Этот параметр не доступен для остановленных
загрузок.
.TP
.B \fBfiles\fP
Возвращает список файлов. Элемент списка \- это структура, такая же, что и в
методе \fI\%aria2.getFiles()\fP.
.TP
.B \fBbittorrent\fP
Структура, в которой содержится информация, извлеченная из .torrent\-файла.
Только для BitTorrent. Содержит следующие поля.
.INDENT 7.0
.TP
.B \fBannounceList\fP
Список списков URI анонса. Если .torrent\-файл содержит анонс, а не
список\-анонс, то анонс конвертируется в формат списка\-анонса.
.TP
.B \fBcomment\fP
Комментарий по торренту. Используется comment.utf\-8, если доступно.
.TP
.B \fBcreationDate\fP
Время создания торрента. Значение является целым числом, с начала века,
измеряется в секундах.
.TP
.B \fBmode\fP
Файловый режим торрента. Значение одно из двух: \(aqsingle\(aq (одиночный) или
\(aqmulti\(aq (множественный).
.TP
.B \fBinfo\fP
Структура, которая содержит данные из раздела Info. Она содержит следующие
поля.
.INDENT 7.0
.TP
.B \fBname\fP
имя в разделе info. Используется name.utf\-8, если доступно.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример получает информацию о загрузке, GID которой "1":
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.tellStatus\(aq, \(aqparams\(aq:[\(aq1\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqbitfield\(aq: u\(aq0000000000\(aq,
             u\(aqcompletedLength\(aq: u\(aq901120\(aq,
             u\(aqconnections\(aq: u\(aq1\(aq,
             u\(aqdir\(aq: u\(aq/downloads\(aq,
             u\(aqdownloadSpeed\(aq: u\(aq15158\(aq,
             u\(aqfiles\(aq: [{u\(aqindex\(aq: u\(aq1\(aq,
                         u\(aqlength\(aq: u\(aq34896138\(aq,
                         u\(aqcompletedLength\(aq: u\(aq34896138\(aq,
                         u\(aqpath\(aq: u\(aq/downloads/file\(aq,
                         u\(aqselected\(aq: u\(aqtrue\(aq,
                         u\(aquris\(aq: [{u\(aqstatus\(aq: u\(aqused\(aq,
                                    u\(aquri\(aq: u\(aqhttp://example.org/file\(aq}]}],
             u\(aqgid\(aq: u\(aq1\(aq,
             u\(aqnumPieces\(aq: u\(aq34\(aq,
             u\(aqpieceLength\(aq: u\(aq1048576\(aq,
             u\(aqstatus\(aq: u\(aqactive\(aq,
             u\(aqtotalLength\(aq: u\(aq34896138\(aq,
             u\(aquploadLength\(aq: u\(aq0\(aq,
             u\(aquploadSpeed\(aq: u\(aq0\(aq}}
.ft P
.fi
.sp
Следующий пример получает информацию об определенных полях, который вас
интересуют:
.sp
.nf
.ft C
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.tellStatus\(aq,
\&...                       \(aqparams\(aq:[\(aq1\(aq, [\(aqgid\(aq,
\&...                                       \(aqtotalLength\(aq,
\&...                                       \(aqcompletedLength\(aq]]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqcompletedLength\(aq: u\(aq5701632\(aq,
             u\(aqgid\(aq: u\(aq1\(aq,
             u\(aqtotalLength\(aq: u\(aq34896138\(aq}}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример получает информацию о загрузке, GID которой "1":
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.tellStatus(\(aq1\(aq)
>>> pprint(r)
{\(aqbitfield\(aq: \(aqffff80\(aq,
 \(aqcompletedLength\(aq: \(aq34896138\(aq,
 \(aqconnections\(aq: \(aq0\(aq,
 \(aqdir\(aq: \(aq/downloads\(aq,
 \(aqdownloadSpeed\(aq: \(aq0\(aq,
 \(aqerrorCode\(aq: \(aq0\(aq,
 \(aqfiles\(aq: [{\(aqindex\(aq: \(aq1\(aq,
            \(aqlength\(aq: \(aq34896138\(aq,
            \(aqcompletedLength\(aq: \(aq34896138\(aq,
            \(aqpath\(aq: \(aq/downloads/file\(aq,
            \(aqselected\(aq: \(aqtrue\(aq,
            \(aquris\(aq: [{\(aqstatus\(aq: \(aqused\(aq,
                      \(aquri\(aq: \(aqhttp://example.org/file\(aq}]}],
 \(aqgid\(aq: \(aq1\(aq,
 \(aqnumPieces\(aq: \(aq17\(aq,
 \(aqpieceLength\(aq: \(aq2097152\(aq,
 \(aqstatus\(aq: \(aqcomplete\(aq,
 \(aqtotalLength\(aq: \(aq34896138\(aq,
 \(aquploadLength\(aq: \(aq0\(aq,
 \(aquploadSpeed\(aq: \(aq0\(aq}
.ft P
.fi
.sp
Следующий пример получает информацию об определенных полях, который вас
интересуют:
.sp
.nf
.ft C
>>> r = s.aria2.tellStatus(\(aq1\(aq, [\(aqgid\(aq, \(aqtotalLength\(aq, \(aqcompletedLength\(aq])
>>> pprint(r)
{\(aqcompletedLength\(aq: \(aq34896138\(aq, \(aqgid\(aq: \(aq1\(aq, \(aqtotalLength\(aq: \(aq34896138\(aq}
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getUris(gid)
Этот метод возвращает URI, используемые в загрузке, которая обозначена
\fIgid\fP. Параметр \fIgid\fP имеет тип строка. Ответ имеет тип массив, а элемент \-
тип структура и содержит следующие поля. Поле имеет тип строка.
.INDENT 7.0
.TP
.B \fBuri\fP
URI
.TP
.B \fBstatus\fP
\(aqused\(aq, если URI уже использован. \(aqwaiting\(aq, если URI ожидает в очереди.
.UNINDENT
.sp
\fBПример JSON\-RPC\fP
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getUris\(aq, \(aqparams\(aq:[\(aq1\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: [{u\(aqstatus\(aq: u\(aqused\(aq,
              u\(aquri\(aq: u\(aqhttp://example.org/file\(aq}]}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getUris(\(aq1\(aq)
>>> pprint(r)
[{\(aqstatus\(aq: \(aqused\(aq, \(aquri\(aq: \(aqhttp://example.org/file\(aq}]
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getFiles(gid)
Этот метод возвращает список файлов загрузки, которая обозначена
\fIgid\fP. Параметр \fIgid\fP имеет тип строка. Ответ имеет тип массив, а элемент \-
тип структура и содержит следующие поля. Поле имеет тип строка.
.INDENT 7.0
.TP
.B \fBindex\fP
Индекс файла. Начинается с 1. Последовательность файлов такая же, что и в
многофайловом торренте.
.TP
.B \fBpath\fP
Путь к файлу.
.TP
.B \fBlength\fP
Размер файла в байта.
.TP
.B \fBcompletedLength\fP
Загруженный объем файла в байтах. Обратите внимание, что вполне возможно,
что сумма completedLength меньше чем в методе
\fI\%aria2.tellStatus()\fP.  Это потому, что completedLength в
\fI\%aria2.getFiles()\fP считаются только завершенные
блоки. С другой стороны, completedLength в
\fI\%aria2.tellStatus()\fP учитывает частично завершенные блоки.
.TP
.B \fBselected\fP
\fB"true"\fP \- если этот файл выбран параметром
\fI\%--select-file\fP. Если параметр
\fI\%--select-file\fP не указан или это однофайловый торрент или загрузка не
торрент, то это значение всегда будет \fB"true"\fP. Иначе \fB"false"\fP.
.TP
.B \fBuris\fP
Возвращает список URI для этого файла. Элемент списка такая же структура,
что используется в методе \fI\%aria2.getUris()\fP.
.UNINDENT
.sp
\fBПример JSON\-RPC\fP
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getFiles\(aq, \(aqparams\(aq:[\(aq1\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: [{u\(aqindex\(aq: u\(aq1\(aq,
              u\(aqlength\(aq: u\(aq34896138\(aq,
              u\(aqcompletedLength\(aq: u\(aq34896138\(aq,
              u\(aqpath\(aq: u\(aq/downloads/file\(aq,
              u\(aqselected\(aq: u\(aqtrue\(aq,
              u\(aquris\(aq: [{u\(aqstatus\(aq: u\(aqused\(aq,
                         u\(aquri\(aq: u\(aqhttp://example.org/file\(aq}]}]}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getFiles(\(aq1\(aq)
>>> pprint(r)
[{\(aqindex\(aq: \(aq1\(aq,
  \(aqlength\(aq: \(aq34896138\(aq,
  \(aqcompletedLength\(aq: \(aq34896138\(aq,
  \(aqpath\(aq: \(aq/downloads/file\(aq,
  \(aqselected\(aq: \(aqtrue\(aq,
  \(aquris\(aq: [{\(aqstatus\(aq: \(aqused\(aq,
            \(aquri\(aq: \(aqhttp://example.org/file\(aq}]}]
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getPeers(gid)
Этот метод возвращает список пиров загрузки, которая обозначена
\fIgid\fP. Параметр \fIgid\fP имеет тип строка. Этот метод только для
BitTorrent. Ответ имеет тип массив, а элемент \- тип структура и содержит
следующие поля. Поле имеет тип строка.
.INDENT 7.0
.TP
.B \fBpeerId\fP
Закодированное ID пира.
.TP
.B \fBip\fP
IP\-адрес пира.
.TP
.B \fBport\fP
Номер порта пира.
.TP
.B \fBbitfield\fP
Шестнадцатеричное представление процесса загрузки. Старший бит соответствует
блоку с индексом 0. Бит устанавливается, если блок доступен и не
устанавливается, если блок отсутствует. Запасные биты в конце
устанавливаются в 0.
.TP
.B \fBamChoking\fP
\fB"true"\fP \- если этот клиент блокирует пира. Иначе \fB"false"\fP.
.TP
.B \fBpeerChoking\fP
\fB"true"\fP \- если пир блокирует этого клиента. Иначе \fB"false"\fP.
.TP
.B \fBdownloadSpeed\fP
Скорость загрузки (байт/сек), с которой этот клиент получает от пира.
.TP
.B \fBuploadSpeed\fP
Скорость выгрузки (байт/сек), с которой этот клиент отдает пиру.
.TP
.B \fBseeder\fP
\fB"true"\fP \- если этот клиент является сидом. Иначе \fB"false"\fP.
.UNINDENT
.sp
\fBПример JSON\-RPC\fP
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getPeers\(aq, \(aqparams\(aq:[\(aq1\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: [{u\(aqamChoking\(aq: u\(aqtrue\(aq,
              u\(aqbitfield\(aq: u\(aqffffffffffffffffffffffffffffffffffffffff\(aq,
              u\(aqdownloadSpeed\(aq: u\(aq10602\(aq,
              u\(aqip\(aq: u\(aq10.0.0.9\(aq,
              u\(aqpeerChoking\(aq: u\(aqfalse\(aq,
              u\(aqpeerId\(aq: u\(aqaria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6\(aq,
              u\(aqport\(aq: u\(aq6881\(aq,
              u\(aqseeder\(aq: u\(aqtrue\(aq,
              u\(aquploadSpeed\(aq: u\(aq0\(aq},
             {u\(aqamChoking\(aq: u\(aqfalse\(aq,
              u\(aqbitfield\(aq: u\(aqffffeff0fffffffbfffffff9fffffcfff7f4ffff\(aq,
              u\(aqdownloadSpeed\(aq: u\(aq8654\(aq,
              u\(aqip\(aq: u\(aq10.0.0.30\(aq,
              u\(aqpeerChoking\(aq: u\(aqfalse\(aq,
              u\(aqpeerId\(aq: u\(aqbittorrent client758\(aq,
              u\(aqport\(aq: u\(aq37842\(aq,
              u\(aqseeder\(aq: u\(aqfalse\(aq,
              u\(aquploadSpeed\(aq: u\(aq6890\(aq}]}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getPeers(\(aq1\(aq)
>>> pprint(r)
[{\(aqamChoking\(aq: \(aqtrue\(aq,
  \(aqbitfield\(aq: \(aqffffffffffffffffffffffffffffffffffffffff\(aq,
  \(aqdownloadSpeed\(aq: \(aq10602\(aq,
  \(aqip\(aq: \(aq10.0.0.9\(aq,
  \(aqpeerChoking\(aq: \(aqfalse\(aq,
  \(aqpeerId\(aq: \(aqaria2%2F1%2E10%2E5%2D%87%2A%EDz%2F%F7%E6\(aq,
  \(aqport\(aq: \(aq6881\(aq,
  \(aqseeder\(aq: \(aqtrue\(aq,
  \(aquploadSpeed\(aq: \(aq0\(aq},
 {\(aqamChoking\(aq: \(aqfalse\(aq,
  \(aqbitfield\(aq: \(aqffffeff0fffffffbfffffff9fffffcfff7f4ffff\(aq,
  \(aqdownloadSpeed\(aq: \(aq8654\(aq,
  \(aqip\(aq: \(aq10.0.0.30\(aq,
  \(aqpeerChoking\(aq: \(aqfalse\(aq,
  \(aqpeerId\(aq: \(aqbittorrent client758\(aq,
  \(aqport\(aq: \(aq37842\(aq,
  \(aqseeder\(aq: \(aqfalse,
  \(aquploadSpeed\(aq: \(aq6890\(aq}]
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getServers(gid)
Этот метод возвращает текущие подключенные HTTP(S)/FTP\-серверы загрузки,
которая обозначена \fIgid\fP. Параметр \fIgid\fP имеет тип строка. Ответ имеет тип
массив, а элемент \- тип структура и содержит следующие поля. Поле имеет тип
строка.
.INDENT 7.0
.TP
.B \fBindex\fP
Индекс файла. Начинается с 1. Последовательность файлов такая же, что и в
многофайловом торренте.
.TP
.B \fBservers\fP
Список структур, которые содержат следующие поля.
.INDENT 7.0
.TP
.B \fBuri\fP
Первоначально добавленный URI.
.TP
.B \fBcurrentUri\fP
Это URI в настоящее время используется для загрузки. Если происходит
перенаправление, currentUri и uri могут отличаться.
.TP
.B \fBdownloadSpeed\fP
Скорость загрузки (байт/сек)
.UNINDENT
.UNINDENT
.sp
\fBПример JSON\-RPC\fP
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getServers\(aq, \(aqparams\(aq:[\(aq1\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: [{u\(aqindex\(aq: u\(aq1\(aq,
              u\(aqservers\(aq: [{u\(aqcurrentUri\(aq: u\(aqhttp://example.org/file\(aq,
                            u\(aqdownloadSpeed\(aq: u\(aq10467\(aq,
                            u\(aquri\(aq: u\(aqhttp://example.org/file\(aq}]}]}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getServers(\(aq1\(aq)
>>> pprint(r)
[{\(aqindex\(aq: \(aq1\(aq,
  \(aqservers\(aq: [{\(aqcurrentUri\(aq: \(aqhttp://example.org/dl/file\(aq,
               \(aqdownloadSpeed\(aq: \(aq20285\(aq,
               \(aquri\(aq: \(aqhttp://example.org/file\(aq}]}]
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.tellActive([keys])
Этот метод возвращает список активных загрузок. Ответ имеет тип массив и его
элемент такая же структура, которая возвращается методом
\fI\%aria2.tellStatus()\fP. За разъяснениями о
параметре \(aqkeys\(aq, обратитесь к методу
\fI\%aria2.tellStatus()\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.tellWaiting(offset, num[, keys])
Этот метод возвращает список ожидающих загрузок, включая приостановленные
загрузки. \fIoffset\fP имеет целочисленный тип и указывает смещение, начиная от
ожидающей загрузки. \fInum\fP имеет целочисленный тип и указывает число
возвращаемых загрузок. За разъяснениями о параметре \(aqkeys\(aq, обратитесь к
методу \fI\%aria2.tellStatus()\fP.
.sp
Если смещение положительное целое число, то этот метод возвращает загрузки в
диапазоне [\fIoffset\fP, \fIoffset*+*num\fP).
.sp
\fIoffset\fP может быть отрицательным целым числом. \fIoffset\fP == \-1 указывает на
последнею загрузку, которая ожидает в очереди, а \fIoffset\fP == \-2 указывает на
загрузку перед последней, и так далее. Загрузки в ответе находятся в
обратном порядке.
.sp
Например, допустим, что есть три загрузки "A","B" и "C", в этом порядке,
которые ожидают. aria2.tellWaiting(0, 1) возвратит
["A"]. aria2.tellWaiting(1, 2) возвратит ["B", "C"]. aria2.tellWaiting(\-1,
2) возвратит ["C", "B"].
.sp
Ответ имеет тип массив и его элемент такая же структура, которая
возвращается методом \fI\%aria2.tellStatus()\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.tellStopped(offset, num[, keys])
Этот метод возвращает список остановленных загрузок. \fIoffset\fP имеет
целочисленный тип и указывает смещение, начиная с самой старой
загрузки. \fInum\fP имеет целочисленный тип и указывает число возвращаемых
загрузок. За разъяснениями о параметре \(aqkeys\(aq, обратитесь к методу
\fI\%aria2.tellStatus()\fP.
.sp
\fIoffset\fP и \fInum\fP имеют такую же семантику, как и в методе
\fI\%aria2.tellWaiting()\fP.
.sp
Ответ имеет тип массив и его элемент такая же структура, которая
возвращается методом \fI\%aria2.tellStatus()\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.changePosition(gid, pos, how)
Этот метод меняет позицию загрузки, которая обозначена \fIgid\fP. \fIpos\fP имеет
целочисленный тип. \fIhow\fP имеет тип строка. Если \fIhow\fP \- \fB"POS_SET"\fP, то это
переместит загрузку на позицию, относительно начала очереди. Если \fIhow\fP \-
\fB"POS_CUR"\fP, это переместит загрузку на позицию, относительно текущей
позиции. Если \fIhow\fP \- \fB"POS_END"\fP, это переместит загрузку на позицию,
относительно конца очереди. Если целевая позиция меньше чем 0 или за
пределами конца очереди, это переместит загрузку в начало или конец очереди
соответственно. Ответ имеет целочисленный тип и является целевой позицией.
.sp
Например, если GID#1 размещается на позиции 3, \fBaria2.changePosition(\(aq1\(aq, \-1, \(aqPOS_CUR\(aq)\fP
изменит его позицию на 2. Дополнительно \fBaria2.changePosition(\(aq1\(aq, 0, \(aqPOS_SET\(aq)\fP
изменит его позицию на 0 (начало очереди).
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример перемещает загрузку, GID которой "3", в начало очереди
ожидания:
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.changePosition\(aq,
\&...                       \(aqparams\(aq:[\(aq3\(aq, 0, \(aqPOS_SET\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: 0}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример перемещает загрузку, GID которой "3", в начало очереди
ожидания:
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.changePosition(\(aq3\(aq, 0, \(aqPOS_SET\(aq)
0
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.changeUri(gid, fileIndex, delUris, addUris[, position])
Этот метод удаляет URI в \fIdelUris\fP из загрузки и добавляет URI в \fIaddUris\fP к
загрузке, которая обозначена \fIgid\fP. \fIdelUris\fP и \fIaddUris\fP являются списком
строк. Загрузка может содержать несколько файлов и URI прилагаются к каждому
файлу. \fIfileIndex\fP используется, чтобы выбрать файл для удаления/подключения
заданных URI. \fIfileIndex\fP начинается с 1. \fIposition\fP используется для
указания, куда будут вставлены URI в существующем списке ожидающих
URI. \fIposition\fP начинается с 0. Когда \fIposition\fP пропущено, URI добавляются
в конец списка. Этот метод сначала выполняет удаление, а потом
добавление. \fIposition\fP это позиция после URI, которые будут удалены, а не
позиция, когда метод вызывается. При удалении URI, если одинаковые URI
существуют в загрузке, только один из них будет удален, для каждого URI в
\fIdelUris\fP. Другими словами, есть три URI \fBhttp://example.org/aria2\fP и вы
хотите удалить их все, вы должны указать (по крайней мере) 3
\fBhttp://example.org/aria2\fP в \fIdelUris\fP. Этот метод возвращает список,
который содержит 2 целых числа. Первое \- количество удаленных URI. Второе \-
количество добавленных URI.
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример добавляет 1 URI http://example.org/file к файлу с индексом
"1", принадлежащий загрузке, GID которой "2":
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.changeUri\(aq,
\&...                       \(aqparams\(aq:[\(aq2\(aq, 1, [], [\(aqhttp://example.org/file\(aq]]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: [0, 1]}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример добавляет 1 URI http://example.org/file к файлу с индексом
"1", принадлежащий загрузке, GID которой "2":
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.changeUri(\(aq2\(aq, 1, [], [\(aqhttp://example.org/file\(aq])
[0, 1]
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getOption(gid)
Этот метод возвращает параметры загрузки, которая обозначена \fIgid\fP. Ответ
имеет тип структура. Ее поля \- это название параметра. Поле имеет тип
строка. Обратите внимание, что этот метод не возвращает параметры, которые
не имеют значение по умолчанию и не были заданы параметрами командной
строки, конфигурационными файлами или RPC\-методами.
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример получает параметры загрузки, GID которой "1":
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getOption\(aq, \(aqparams\(aq:[\(aq1\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqallow\-overwrite\(aq: u\(aqfalse\(aq,
             u\(aqallow\-piece\-length\-change\(aq: u\(aqfalse\(aq,
             u\(aqalways\-resume\(aq: u\(aqtrue\(aq,
             u\(aqasync\-dns\(aq: u\(aqtrue\(aq,
 ...
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример получает параметры загрузки, GID которой "1":
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getOption(\(aq1\(aq)
>>> pprint(r)
{\(aqallow\-overwrite\(aq: \(aqfalse\(aq,
 \(aqallow\-piece\-length\-change\(aq: \(aqfalse\(aq,
 \(aqalways\-resume\(aq: \(aqtrue\(aq,
 \(aqasync\-dns\(aq: \(aqtrue\(aq,
 ....
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.changeOption(gid, options)
Этот метод изменяет динамически параметры загрузки, которая обозначена
\fIgid\fP. \fIgid\fP имеет тип строка. \fIoptions\fP имеет тип структура. Доступны
следующие параметры для активных загрузок:
.INDENT 7.0
.IP \(bu 2
\fI\%bt-max-peers\fP
.IP \(bu 2
\fI\%bt-request-peer-speed-limit\fP
.IP \(bu 2
\fI\%bt-remove-unselected-file\fP
.IP \(bu 2
\fI\%max-download-limit\fP
.IP \(bu 2
\fI\%max-upload-limit\fP
.UNINDENT
.sp
Для ожидающих или приостановленных загрузок, в дополнение к выше
перечисленным параметрам, доступны параметры, перечисленные в подразделе
\fI\%Входной файл\fP, исключая следующие параметры:
\fI\%dry-run\fP,
\fI\%metalink-base-uri\fP,
\fI\%parameterized-uri\fP, \fI\%pause\fP и
\fI\%piece-length\fP. Этот метод возвращает \fB"OK"\fP, в
случае успеха.
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример устанавливает параметр
\fI\%max-download-limit\fP в \fB"20K"\fP для загрузки, GID которой "1":
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.changeOption\(aq,
\&...                       \(aqparams\(aq:[\(aq1\(aq, {\(aqmax\-download\-limit\(aq:\(aq10K\(aq}]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: u\(aqOK\(aq}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример устанавливает параметр
\fI\%max-download-limit\fP в \fB"20K"\fP для загрузки, GID которой "1":
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.changeOption(\(aq1\(aq, {\(aqmax\-download\-limit\(aq:\(aq20K\(aq})
\(aqOK\(aq
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getGlobalOption()
Этот метод возвращает глобальные параметры. Ответ имеет тип структура. Ее
поля \- это название параметра. Поле имеет тип строка. Обратите внимание, что
этот метод не возвращает параметры, которые не имеют значение по умолчанию и
не были заданы параметрами командной строки, конфигурационными файлами или
RPC\-методами. Так как глобальные параметры используются в качестве шаблона
для вновь добавляемой загрузки, ответ содержит поля возвращаемые методом
\fI\%aria2.getOption()\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.changeGlobalOption(options)
Этот метод изменяет динамически глобальные параметры. \fIoptions\fP имеет тип
структура. Доступны следующие параметры:
.INDENT 7.0
.IP \(bu 2
\fI\%download-result\fP
.IP \(bu 2
\fI\%log\fP
.IP \(bu 2
\fI\%log-level\fP
.IP \(bu 2
\fI\%max-concurrent-downloads\fP
.IP \(bu 2
\fI\%max-download-result\fP
.IP \(bu 2
\fI\%max-overall-download-limit\fP
.IP \(bu 2
\fI\%max-overall-upload-limit\fP
.IP \(bu 2
\fI\%save-cookies\fP
.IP \(bu 2
\fI\%save-session\fP
.IP \(bu 2
\fI\%server-stat-of\fP
.UNINDENT
.sp
В дополнение к ним, параметры перечисленные в подразделе \fI\%Входной файл\fP, исключая следующие параметры:
\fI\%checksum\fP, \fI\%index-out\fP,
\fI\%out\fP, \fI\%pause\fP и
\fI\%select-file\fP.
.sp
Используя параметр \fI\%log\fP, вы можете динамически
начинать вести журнал событий или изменять файл журнала событий. Чтобы
остановить ведение журнала событий, задайте пустую строку ("") в качестве
значения параметра. Обратите внимание, что файл журнала событий всегда
открыт в режиме добавления. Этот метод возвращает \fB"OK"\fP, в случае успеха.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getGlobalStat()
Этот метод возвращает глобальную статистику по скорости загрузки и скорости
отдачи. Ответ имеет тип структура и содержит следующие поля. Поле имеет тип
строка.
.INDENT 7.0
.TP
.B \fBdownloadSpeed\fP
Общая скорость загрузки (байт/сек).
.TP
.B \fBuploadSpeed\fP
Общая скорость отдачи (байт/сек).
.TP
.B \fBnumActive\fP
Количество активных загрузок.
.TP
.B \fBnumWaiting\fP
Количество ожидающих загрузок.
.TP
.B \fBnumStopped\fP
Количество остановленных загрузок.
.UNINDENT
.sp
\fBПример JSON\-RPC\fP
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getGlobalStat\(aq})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqdownloadSpeed\(aq: u\(aq21846\(aq,
             u\(aqnumActive\(aq: u\(aq2\(aq,
             u\(aqnumStopped\(aq: u\(aq0\(aq,
             u\(aqnumWaiting\(aq: u\(aq0\(aq,
             u\(aquploadSpeed\(aq: u\(aq0\(aq}}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getGlobalStat()
>>> pprint(r)
{\(aqdownloadSpeed\(aq: \(aq23136\(aq,
 \(aqnumActive\(aq: \(aq2\(aq,
 \(aqnumStopped\(aq: \(aq0\(aq,
 \(aqnumWaiting\(aq: \(aq0\(aq,
 \(aquploadSpeed\(aq: \(aq0\(aq}
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.purgeDownloadResult()
Этот метод очищает, для освобождения памяти, завершенные/ошибка/удаленные
загрузки. Метод возвращает \fB"OK"\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.removeDownloadResult(gid)
Этот метод удаляет из памяти завершенную/ошибка/удаленную загрузку, которая
обозначена \fIgid\fP. Метод возвращает \fB"OK"\fP, в случае успеха.
.sp
\fBПример JSON\-RPC\fP
.sp
Следующий пример удаляет результат загрузки, GID которой "1":
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.removeDownloadResult\(aq,
\&...                       \(aqparams\(aq:[\(aq1\(aq]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: u\(aqOK\(aq}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
Следующий пример удаляет результат загрузки, GID которой "1":
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.removeDownloadResult(\(aq1\(aq)
\(aqOK\(aq
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getVersion()
Этот метод возвращает версию программы и список включенных
возможностей. Ответ имеет тип структура и содержит следующие поля.
.INDENT 7.0
.TP
.B \fBversion\fP
Номер версии программы в строке.
.TP
.B \fBenabledFeatures\fP
Список включенных возможностей. Каждое имя возможности имеет тип строка.
.UNINDENT
.sp
\fBПример JSON\-RPC\fP
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getVersion\(aq})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqenabledFeatures\(aq: [u\(aqAsync DNS\(aq,
                                  u\(aqBitTorrent\(aq,
                                  u\(aqFirefox3 Cookie\(aq,
                                  u\(aqGZip\(aq,
                                  u\(aqHTTPS\(aq,
                                  u\(aqMessage Digest\(aq,
                                  u\(aqMetalink\(aq,
                                  u\(aqXML\-RPC\(aq],
             u\(aqversion\(aq: u\(aq1.11.0\(aq}}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
.nf
.ft C
>>> import xmlrpclib
>>> from pprint import pprint
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> r = s.aria2.getVersion()
>>> pprint(r)
{\(aqenabledFeatures\(aq: [\(aqAsync DNS\(aq,
                     \(aqBitTorrent\(aq,
                     \(aqFirefox3 Cookie\(aq,
                     \(aqGZip\(aq,
                     \(aqHTTPS\(aq,
                     \(aqMessage Digest\(aq,
                     \(aqMetalink\(aq,
                     \(aqXML\-RPC\(aq],
 \(aqversion\(aq: \(aq1.11.0\(aq}
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.getSessionInfo()
Этот метод возвращает информацию о сессии. Ответ имеет тип структура и
содержит следующие поля.
.INDENT 7.0
.TP
.B \fBsessionId\fP
ID сессии, которое генерируется каждый раз, при запуске aria2.
.UNINDENT
.sp
\fBПример JSON\-RPC\fP
.sp
.nf
.ft C
>>> import urllib2, json
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqaria2.getSessionInfo\(aq})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq,
 u\(aqjsonrpc\(aq: u\(aq2.0\(aq,
 u\(aqresult\(aq: {u\(aqsessionId\(aq: u\(aqcd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9\(aq}}
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> s.aria2.getSessionInfo()
{\(aqsessionId\(aq: \(aqcd6a3bc6a1de28eb5bfa181e5f6b916d44af31a9\(aq}
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B aria2.shutdown()
Этот метод закрывает aria2. Метод возвращает \fB"OK"\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.forceShutdown()
Этот метод закрывает aria2. Метод действует подобно
\fI\%aria2.shutdown()\fP, за исключением того, что
метод выполняется без каких\-либо действий, которые требует времени, связь с
BitTorrent\-трекером пропускается. Метод возвращает \fB"OK"\fP.
.UNINDENT
.INDENT 0.0
.TP
.B system.multicall(methods)
Этот метод объединяет несколько вызовов методов в один запрос. \fImethods\fP
имеет тип массив, а элемент является структурой. Структура содержит два
поля: \fBmethodName\fP и \fBparams\fP. \fBmethodName\fP \- это имя вызываемого метода, а
\fBparams\fP \- содержит параметры к методу. Метод возвращает массив
ответов. Элемент массива будет одним из двух: массивом из одного элемента,
который содержит возвращаемое значение, для каждого вызываемого метода или
структурой с ошибками в полях, если вызов объединенного метода завершился
неудачно.
.sp
\fBПример JSON\-RPC\fP
.sp
В следующем примере мы добавляем 2 загрузки. Первая \-
http://example.org/file и вторая \- один file.torrent:
.sp
.nf
.ft C
>>> import urllib2, json, base64
>>> from pprint import pprint
>>> jsonreq = json.dumps({\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                       \(aqmethod\(aq:\(aqsystem.multicall\(aq,
\&...                       \(aqparams\(aq:[[{\(aqmethodName\(aq:\(aqaria2.addUri\(aq,
\&...                                   \(aqparams\(aq:[[\(aqhttp://example.org\(aq]]},
\&...                                  {\(aqmethodName\(aq:\(aqaria2.addTorrent\(aq,
\&...                                   \(aqparams\(aq:[base64.b64encode(open(\(aqfile.torrent\(aq).read())]}]]})
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: [[u\(aq1\(aq], [u\(aq2\(aq]]}
.ft P
.fi
.sp
JSON\-RPC также поддерживает пакетный запрос, который описывается в
спецификации JSON\-RPC 2.0:
.sp
.nf
.ft C
>>> jsonreq = json.dumps([{\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq,
\&...                        \(aqmethod\(aq:\(aqaria2.addUri\(aq,
\&...                        \(aqparams\(aq:[[\(aqhttp://example.org\(aq]]},
\&...                       {\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqasdf\(aq,
\&...                        \(aqmethod\(aq:\(aqaria2.addTorrent\(aq,
\&...                        \(aqparams\(aq:[base64.b64encode(open(\(aqfile.torrent\(aq).read())]}])
>>> c = urllib2.urlopen(\(aqhttp://localhost:6800/jsonrpc\(aq, jsonreq)
>>> pprint(json.loads(c.read()))
[{u\(aqid\(aq: u\(aqqwer\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: u\(aq1\(aq},
 {u\(aqid\(aq: u\(aqasdf\(aq, u\(aqjsonrpc\(aq: u\(aq2.0\(aq, u\(aqresult\(aq: u\(aq2\(aq}]
.ft P
.fi
.sp
\fBПример XML\-RPC\fP
.sp
В следующем примере мы добавляем 2 загрузки. Первая \-
http://example.org/file и вторая \- один file.torrent:
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> mc = xmlrpclib.MultiCall(s)
>>> mc.aria2.addUri([\(aqhttp://example.org/file\(aq])
>>> mc.aria2.addTorrent(xmlrpclib.Binary(open(\(aqfile.torrent\(aq).read()))
>>> r = mc()
>>> tuple(r)
(\(aq2\(aq, \(aq3\(aq)
.ft P
.fi
.UNINDENT
.SS Обработка ошибок
.sp
В JSON\-RPC, aria2 возвращает JSON\-объект, который содержит код ошибки в коде
и сообщение об ошибке в сообщении.
.sp
В XML\-RPC, aria2 возвращает faultCode=1 и сообщение об ошибке в faultString.
.SS Параметры
.sp
Такие же параметры, что доступны для \fI\%--input-file\fP. Смотрите
подраздел \fI\%Входной файл\fP для полного списка параметров.
.sp
В структуре, имя элемента \- это имя параметра (без \fB\-\-\fP), а значение
элемента \- аргумент в виде строки.
.SS Пример JSON\-RPC
.sp
.nf
.ft C
{\(aqsplit\(aq:\(aq1\(aq, \(aqhttp\-proxy\(aq:\(aqhttp://proxy/\(aq}
.ft P
.fi
.SS Пример XML\-RPC
.sp
.nf
.ft C
<struct>
  <member>
    <name>split</name>
    <value><string>1</string></value>
  </member>
  <member>
    <name>http\-proxy</name>
    <value><string>http://proxy/</string></value>
  </member>
</struct>
.ft P
.fi
.sp
Параметры \fI\%header\fP и \fI\%index-out\fP допускают
нескольких определений в командной строке. Поскольку имя должно быть
уникальным в структуре (многие реализации библиотеки XML\-RPC использует хэш
или словарь для структуры), одной строки не достаточно. Для преодоления этой
ситуации, они могут взять массив в качестве значения, а также строку.
.SS Пример JSON\-RPC
.sp
.nf
.ft C
{\(aqheader\(aq:[\(aqAccept\-Language: ja\(aq, \(aqAccept\-Charset: utf\-8\(aq]}
.ft P
.fi
.SS Пример XML\-RPC
.sp
.nf
.ft C
<struct>
  <member>
    <name>header</name>
    <value>
      <array>
        <data>
          <value><string>Accept\-Language: ja</string></value>
          <value><string>Accept\-Charset: utf\-8</string></value>
        </data>
      </array>
    </value>
  </member>
</struct>
.ft P
.fi
.sp
Следующий пример добавляет загрузку с двумя параметрами: dir и
header. Параметр header имеет 2 значения, поэтому используется список:
.sp
.nf
.ft C
>>> import xmlrpclib
>>> s = xmlrpclib.ServerProxy(\(aqhttp://localhost:6800/rpc\(aq)
>>> opts = dict(dir=\(aq/tmp\(aq,
\&...             header=[\(aqAccept\-Language: ja\(aq,
\&...                     \(aqAccept\-Charset: utf\-8\(aq])
>>> s.aria2.addUri([\(aqhttp://example.org/file\(aq], opts)
\(aq1\(aq
.ft P
.fi
.SS JSON\-RPC используя HTTP GET
.sp
JSON\-RPC\-интерфейс также поддерживает запрос через HTTP GET. Схема
кодирования в GET параметров основанных на JSON\-RPC через HTTP Спецификация
[2008\-1\-15(RC1)]. Кодирование параметров через GET следующие:
.sp
.nf
.ft C
/jsonrpc?method=METHOD_NAME&id=ID&params=BASE64_ENCODED_PARAMS
.ft P
.fi
.sp
\fBmethod\fP и \fBid\fP всегда обрабатывается как JSON\-строка и они должны быть
в кодировке UTF\-8.
.sp
Например, закодированная строка aria2.tellStatus(\(aq3\(aq) с id=\(aqfoo\(aq выглядит
так:
.sp
.nf
.ft C
/jsonrpc?method=aria2.tellStatus&id=foo&params=WyIzIl0%3D
.ft P
.fi
.sp
Параметр \fBparams\fP \- это JSON\-массив в Base64\-кодировке, который обычно
появляется в атрибуте \fBparams\fP в JSON\-RPC\-запросе объекта. В примере выше,
params \- [\(aq3\(aq], следовательно:
.sp
.nf
.ft C
[\(aq3\(aq] \-\-(Base64)\-\-> WyIzIl0= \-\-(Percent Encode)\-\-> WyIzIl0%3D
.ft P
.fi
.sp
JSON\-RPC\-интерфейс поддерживает JSONP. Вы можете определить функцию
обратного вызова в параметре \(aqjsoncallback\(aq:
.sp
.nf
.ft C
/jsonrpc?method=aria2.tellStatus&id=foo&params=WyIzIl0%3D&jsoncallback=cb
.ft P
.fi
.sp
Для пакетного запроса, параметры \fBmethod\fP и \fBid\fP не должны быть
указаны. Полный запрос должен быть определен в параметре
\fBparams\fP. Например, пакетный запрос:
.sp
.nf
.ft C
[{\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqqwer\(aq, \(aqmethod\(aq:\(aqaria2.getVersion\(aq},
 {\(aqjsonrpc\(aq:\(aq2.0\(aq, \(aqid\(aq:\(aqasdf\(aq, \(aqmethod\(aq:\(aqaria2.tellActive\(aq}]
.ft P
.fi
.sp
должен кодироваться так:
.sp
.nf
.ft C
/jsonrpc?params=W3sianNvbnJwYyI6ICIyLjAiLCAiaWQiOiAicXdlciIsICJtZXRob2QiOiAiYXJpYTIuZ2V0VmVyc2lvbiJ9LCB7Impzb25ycGMiOiAiMi4wIiwgImlkIjogImFzZGYiLCAibWV0aG9kIjogImFyaWEyLnRlbGxBY3RpdmUifV0%3D
.ft P
.fi
.SS JSON\-RPC через WebSocket
.sp
JSON\-RPC через WebSocket использует тот же самый метод сигнатур и формат
ответа как у JSON\-RPC через HTTP. Поддерживаемый WebSocket, версия 13,
детально описан в \fI\%RFC 6455\fP.
.sp
Для отправки RPC\-запроса на RPC\-сервер, надо отправлять преобразованную в
последовательную форму JSON\-строку в текстовом фрейме. Ответ от RPC\-сервера
также доставляется в текстовом фрейме.
.sp
RPC\-сервер отправит уведомление клиенту. Уведомление является
однонаправленным, поэтому клиент, который получил уведомление, не должен
отвечать на него. Метод сигнатуры уведомления такой же, как нормальный метод
запроса, но отсутствует идентификатор ключа. Значение, связанное с ключом
params, является данными, которые переносит это уведомление. Формат этого
значения варьируется в зависимости от метода уведомления. Определены
следующие методы уведомления.
.INDENT 0.0
.TP
.B aria2.onDownloadStart(event)
Это уведомление будет оправлено, если загрузка запущена. Параметр \fIevent\fP
имеет тип структура и содержит следующие поля. Поле имеет тип строка.
.INDENT 7.0
.TP
.B \fBgid\fP
GID загрузки.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onDownloadPause(event)
Это уведомление будет оправлено, если загрузка приостановлена. \fIevent\fP \-
такая же структура, как параметр \fIevent\fP в методе
\fI\%aria2.onDownloadStart()\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onDownloadStop(event)
Это уведомление будет оправлено, если загрузка остановлена
пользователем. \fIevent\fP \- такая же структура, как параметр \fIevent\fP в методе
\fI\%aria2.onDownloadStart()\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onDownloadComplete(event)
Это уведомление будет оправлено, если загрузка завершена. В
BitTorrent\-загрузках, это уведомление отправляется, когда загрузка завершена
и сидирование окончено. \fIevent\fP \- такая же структура, как параметр \fIevent\fP в
методе \fI\%aria2.onDownloadStart()\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onDownloadError(event)
Это уведомление будет оправлено, если загрузка остановлена из\-за
ошибки. \fIevent\fP \- такая же структура, как параметр \fIevent\fP в методе
\fI\%aria2.onDownloadStart()\fP.
.UNINDENT
.INDENT 0.0
.TP
.B aria2.onBtDownloadComplete(event)
Это уведомление будет оправлено, если загрузка в BitTorrent завершена (но
сидирование может быть не окончено). \fIevent\fP \- такая же структура, как
параметр \fIevent\fP в методе
\fI\%aria2.onDownloadStart()\fP.
.UNINDENT
.SS Пример кода XML\-RPC\-клиента
.sp
Следующий Ruby\-скрипт добавляет \fBhttp://localhost/aria2.tar.bz2\fP, с
параметром \fI\%--dir=/downloads,\fP в aria2c, которая работает на
localhost и отображает ответ:
.sp
.nf
.ft C
#!/usr/bin/env ruby

require \(aqxmlrpc/client\(aq
require \(aqpp\(aq

client=XMLRPC::Client.new2("http://localhost:6800/rpc")

options={ "dir" => "/downloads" }
result=client.call("aria2.addUri", [ "http://localhost/aria2.tar.bz2" ], options)

pp result
.ft P
.fi
.sp
Если вы любитель Python, то можете использовать xmlrpclib(для Python3.x,
используйте взамен xmlrpc.client) для взаимодействия с aria2:
.sp
.nf
.ft C
import xmlrpclib
from pprint import pprint

s = xmlrpclib.ServerProxy("http://localhost:6800/rpc")
r = s.aria2.addUri(["http://localhost/aria2.tar.bz2"], {"dir":"/downloads"})
pprint(r)
.ft P
.fi
.SH РАЗНОЕ
.SS Консольный индикатор
.sp
При загрузке файлов, aria2 отображает консольный индикатор, сообщающий о
прогрессе загрузок. Консольный индикатор имеет вид:
.sp
.nf
.ft C
[#1 SIZE:400.0KiB/33.2MiB(1%) CN:1 SPD:115.7KiBs ETA:4m51s]
.ft P
.fi
.sp
Этот раздел описывает значение чисел и строк.
.INDENT 0.0
.TP
.B \fB#N\fP
N означает GID, который является уникальным ID для каждой загрузки.
.TP
.B \fBSIZE\fP
Загруженный размер и общий размер в байтах. Если
используется \fI\%--select-file\fP, то значение является суммой
выбранных файлов.
.TP
.B \fBSEEDING\fP
Рейтинг. Клиент сейчас сидирует(раздает). После завершения
BitTorrent\-загрузки, \fBSIZE\fP заменяется на \fBSEEDING\fP.
.TP
.B \fBCN\fP
Количество соединений, установленных клиентом.
.TP
.B \fBSEED\fP
Количество сидов, к которым подключен клиент.
.TP
.B \fBSPD\fP
Скорость загрузки.
.TP
.B \fBUP\fP
Скорость выгрузки и количество выгруженных байт.
.TP
.B \fBETA\fP
Ожидаемое время завершения.
.TP
.B \fBTOTAL SPD\fP
Общая скорость загрузки для всех параллельных загрузок.
.UNINDENT
.sp
Когда aria2 выделяет место под файл или проверяет контрольную сумму, то при
этом дополнительно отображается их прогресс:
.INDENT 0.0
.TP
.B FileAlloc
GID, выделенный размер и общий размер в байтах.
.TP
.B Checksum
GID, проверенный размер и общий размер в байтах.
.UNINDENT
.SH ПРИМЕРЫ
.SS Загрузка по HTTP/FTP
.SS Загрузка файла
.sp
.nf
.ft C
$ aria2c "http://host/file.zip"
.ft P
.fi
.IP Note
Для остановки загрузки, нажмите \fBCtrl\-C\fP. Вы можете возобновить передачу,
запустив aria2c с теми же аргументами в том же каталоге. Вы можете изменить
URI, если они указывают на тот же самый файл.
.RE
.SS Загрузка файла с 2\-ух разных HTTP\-серверов
.sp
.nf
.ft C
$ aria2c "http://host/file.zip" "http://mirror/file.zip"
.ft P
.fi
.SS Загрузка файла с одно хоста, используя 2 соединения
.sp
.nf
.ft C
$ aria2c \-x2 \-k1M "http://host/file.zip"
.ft P
.fi
.SS Загрузка файла с HTTP\- и FTP\-серверов
.sp
.nf
.ft C
$ aria2c "http://host1/file.zip" "ftp://host2/file.zip"
.ft P
.fi
.SS Одновременная загрузка файлов, перечисленных в текстовом файле
.sp
.nf
.ft C
$ aria2c \-ifiles.txt \-j2
.ft P
.fi
.IP Note
Параметр \-j указывает количество параллельных загрузок.
.RE
.SS Использование прокси\-сервера
.sp
Для HTTP:
.sp
.nf
.ft C
$ aria2c \-\-http\-proxy="http://proxy:8080" "http://host/file"
.ft P
.fi
.sp
.nf
.ft C
$ aria2c \-\-http\-proxy="http://proxy:8080" \-\-no\-proxy="localhost,127.0.0.1,192.168.0.0/16" "http://host/file"
.ft P
.fi
.sp
Для FTP:
.sp
.nf
.ft C
$ aria2c \-\-ftp\-proxy="http://proxy:8080" "ftp://host/file"
.ft P
.fi
.IP Note
Смотрите для подробностей \fI\%--http-proxy\fP,
\fI\%--https-proxy\fP,
\fI\%--ftp-proxy\fP, \fI\%--all-proxy\fP и
\fI\%--no-proxy\fP.  Вы можете указать прокси в
переменных окружения. Смотрите раздел \fI\%ОКРУЖЕНИЕ\fP.
.RE
.SS Прокси\-сервер с авторизацией
.sp
.nf
.ft C
$ aria2c \-\-http\-proxy="http://username:password@proxy:8080" "http://host/file"
.ft P
.fi
.sp
.nf
.ft C
$ aria2c \-\-http\-proxy="http://proxy:8080" \-\-http\-proxy\-user="username" \-\-http\-proxy\-passwd="password" "http://host/file"
.ft P
.fi
.SS Загрузка Metalink
.SS Загрузка файлов с удаленного Metalink
.sp
.nf
.ft C
$ aria2c \-\-follow\-metalink=mem "http://host/file.metalink"
.ft P
.fi
.SS Загрузка, используя локальный metalink\-файл
.sp
.nf
.ft C
$ aria2c \-p \-\-lowest\-speed\-limit=4000 file.metalink
.ft P
.fi
.IP Note
Для остановки загрузки, нажмите \fBCtrl\-C\fP. Вы можете возобновить передачу,
запустив aria2c с теми же аргументами в том же каталоге.
.RE
.SS Загрузка нескольких локальных metalink\-файлов
.sp
.nf
.ft C
$ aria2c \-j2 file1.metalink file2.metalink
.ft P
.fi
.SS Загрузка только выбранных файлов, используя индекс
.sp
.nf
.ft C
$ aria2c \-\-select\-file=1\-4,8 file.metalink
.ft P
.fi
.IP Note
Индекс выводится на консоль при использовании параметра \-S.
.RE
.SS Загрузка файла, используя локальный .metalink\-файл с пользовательскими настройками
.sp
.nf
.ft C
$ aria2c \-\-metalink\-location=jp,us \-\-metalink\-version=1.1 \-\-metalink\-language=en\-US file.metalink
.ft P
.fi
.SS Загрузка BitTorrent
.SS Загрузка файлов из удаленного BitTorrent\-файла
.sp
.nf
.ft C
$ aria2c \-\-follow\-torrent=mem "http://host/file.torrent"
.ft P
.fi
.SS Загрузка, используя локальный torrent\-файл
.sp
.nf
.ft C
$ aria2c \-\-max\-upload\-limit=40K file.torrent
.ft P
.fi
.IP Note
\-\-max\-upload\-limit определяет максимальную скорость отдачи.
.RE
.IP Note
Для остановки загрузки, нажмите \fBCtrl\-C\fP. Вы можете возобновить передачу,
запустив aria2c с теми же аргументами в том же каталоге.
.RE
.SS Загрузка, используя BitTorrent Magnet URI
.sp
.nf
.ft C
$ aria2c "magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C&dn=aria2"
.ft P
.fi
.IP Note
Не забывайте заключать BitTorrent Magnet URI, в которой есть символ \fB&\fP, в
одиночные(\fB\(aq\fP) или двойные(\fB"\fP) кавычки.
.RE
.SS Загрузка 2\-х торрентов
.sp
.nf
.ft C
$ aria2c \-j2 file1.torrent file2.torrent
.ft P
.fi
.SS Загрузка файла, используя торрент и HTTP/FTP\-сервер
.sp
.nf
.ft C
$ aria2c \-Ttest.torrent "http://host1/file" "ftp://host2/file"
.ft P
.fi
.IP Note
Загрузка многофайлового торрента через HTTP/FTP не поддерживается.
.RE
.SS Загрузка только выбранных файлов, используя индекс (обычно называют "выборочная загрузка")
.sp
.nf
.ft C
$ aria2c \-\-select\-file=1\-4,8 file.torrent
.ft P
.fi
.IP Note
Индекс выводится на консоль при использовании параметра \-S.
.RE
.SS Указание имени выходного файла
.sp
Для указания выходного имени файла в BitTorrent\-загрузках, вам нужно узнать
индекс файла в torrent\-файле, используя параметр \fI\%--show-files\fP. Например, результат выглядит следующим образом:
.sp
.nf
.ft C
idx|path/length
===+======================
  1|dist/base\-2.6.18.iso
   |99.9MiB
\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
  2|dist/driver\-2.6.18.iso
   |169.0MiB
\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.ft P
.fi
.sp
Сохраняет \(aqdist/base\-2.6.18.iso\(aq в \(aq/tmp/mydir/base.iso\(aq и
\(aqdist/driver\-2.6.18.iso\(aq в \(aq/tmp/dir/driver.iso\(aq, при использовании
следующей команды:
.sp
.nf
.ft C
$ aria2c \-\-dir=/tmp \-\-index\-out=1=mydir/base.iso \-\-index\-out=2=dir/driver.iso file.torrent
.ft P
.fi
.SS Изменение прослушиваемого порта для входящих соединений от пиров
.sp
.nf
.ft C
$ aria2c \-\-listen\-port=7000\-7001,8000 file.torrent
.ft P
.fi
.IP Note
Т.к. aria2 не настраивает брандмауэр или маршрутизатор для перенаправления
портов, вам решать, как это сделать вручную.
.RE
.SS Указать условие остановки программы после завершения загрузки торрента
.sp
.nf
.ft C
$ aria2c \-\-seed\-time=120 \-\-seed\-ratio=1.0 file.torrent
.ft P
.fi
.IP Note
В приведенном выше примере, программа завершается через 120 минут после
завершения загрузки или при достижении рейтинга сидирования 1.0.
.RE
.SS Регулировка скорости отдачи
.sp
.nf
.ft C
$ aria2c \-\-max\-upload\-limit=100K file.torrent
.ft P
.fi
.SS Включить IPv4 DHT
.sp
.nf
.ft C
$ aria2c \-\-enable\-dht \-\-dht\-listen\-port=6881 file.torrent
.ft P
.fi
.IP Note
DHT использует udp\-порт. Так как aria2 не настраивает брандмауэр или
маршрутизатор для перенаправления портов, вам решать как это сделать
вручную.
.RE
.SS Включить IPv6 DHT
.sp
.nf
.ft C
$ aria2c \-\-enable\-dht6 \-\-dht\-listen\-port=6881
\-\-dht\-listen\-addr6=YOUR_GLOBAL_UNICAST_IPV6_ADDR \-\-enable\-async\-dns6
.ft P
.fi
.IP Note
Если aria2c не собрана с c\-ares, то \fI\%--enable-async-dns6\fP
не нужен. aria2 разделяет один и тот же порт между IPv4 и IPv6 DHT.
.RE
.SS Добавить и удалить URI трекера
.sp
Удалить все URI анонса трекеров, описанных в file.torrent и взамен
использовать \fBhttp://tracker1/announce\fP и \fBhttp://tracker2/announce\fP:
.sp
.nf
.ft C
$ aria2c \-\-bt\-exclude\-tracker="*"
\-\-bt\-tracker="http://tracker1/announce,http://tracker2/announce"
file.torrent
.ft P
.fi
.SS Больше расширенных возможностей для HTTP
.SS Загрузить куки
.sp
.nf
.ft C
$ aria2c \-\-load\-cookies=cookies.txt "http://host/file.zip"
.ft P
.fi
.IP Note
Вы можете использовать без изменения cookie\-файл Firefox/Mozilla/Chromium.
.RE
.SS Возобновление загрузки, которая начата в браузере или другой программе
.sp
.nf
.ft C
$ aria2c \-c \-s2 "http://host/partiallydownloadedfile.zip"
.ft P
.fi
.SS Клиентский сертификат авторизации для SSL/TLS
.sp
.nf
.ft C
$ aria2c \-\-certificate=/path/to/mycert.pem \-\-private\-key=/path/to/mykey.pem https://host/file
.ft P
.fi
.IP Note
Указанный в \fI\%--private-key\fP файл должен быть
расшифрован. Режим работы с исходно зашифрованным закрытым ключом не
определен.
.RE
.SS Проверить узел при SSL/TLS, используя исходные CA\-сертификаты
.sp
.nf
.ft C
$ aria2c \-\-ca\-certificate=/path/to/ca\-certificates.crt \-\-check\-certificate https://host/file
.ft P
.fi
.SS И еще больше расширенных возможностей
.SS Регулировка скорости загрузки
.sp
.nf
.ft C
$ aria2c \-\-max\-download\-limit=100K file.metalink
.ft P
.fi
.SS Исправить поврежденную загрузку
.sp
.nf
.ft C
$ aria2c \-V file.metalink
.ft P
.fi
.IP Note
При использовании BitTorrent или Metalink с контрольными суммами блоков
данных можно эффективно исправлять поврежденные загрузки.
.RE
.SS Отклонить соединение, если скорость загрузки меньше чем определенное значение
.sp
.nf
.ft C
$ aria2c \-\-lowest\-speed\-limit=10K file.metalink
.ft P
.fi
.SS Поддержка параметризованных URI
.sp
Вы можете определить набор частей:
.sp
.nf
.ft C
$ aria2c \-P "http://{host1,host2,host3}/file.iso"
.ft P
.fi
.sp
Вы можете определить числовую последовательность:
.sp
.nf
.ft C
$ aria2c \-Z \-P "http://host/image[000\-100].png"
.ft P
.fi
.IP Note
Параметр \-Z необходим, если все URI не указывают на один и тот же файл, как
в примере указанном выше.
.RE
.sp
Вы можете определить шаг счетчика:
.sp
.nf
.ft C
$ aria2c \-Z \-P "http://host/image[A\-Z:2].png"
.ft P
.fi
.SS Проверка контрольной суммы
.sp
.nf
.ft C
$ aria2c \-\-checksum=sha\-1=0192ba11326fe2298c8cb4de616f4d4140213837 http://example.org/file
.ft P
.fi
.SS Параллельные загрузки с произвольным числом URI, metalink, torrent
.sp
.nf
.ft C
$ aria2c \-j3 \-Z "http://host/file1" file2.torrent file3.metalink
.ft P
.fi
.SS Шифрование BitTorrent
.sp
Шифровать всю полезную нагрузку используя ARC4:
.sp
.nf
.ft C
$ aria2c \-\-bt\-min\-crypto\-level=arc4 \-\-bt\-require\-crypto=true file.torrent
.ft P
.fi
.SH СМОТРИТЕ ТАКЖЕ
.sp
Веб\-сайт проекта: \fI\%http://aria2.sourceforge.net/\fP
.sp
Вики aria2: \fI\%http://sourceforge.net/apps/trac/aria2/wiki\fP
.sp
Домашняя страница Metalink: \fI\%http://www.metalinker.org/\fP
.sp
Описание формата Metalink: \fI\%RFC 5854\fP
.SH АВТОРСКОЕ ПРАВО
.sp
Авторское право (C) 2006, 2012 Tatsuhiro Tsujikawa
.sp
Эта программа является свободным программным обеспечением; вы можете
распространять его и/или изменять его в соответствии с условиями лицензии
GNU General Public License, опубликованной Free Software Foundation; либо
License версии 2, либо (по вашему выбору) любой более поздней версии.
.sp
Эта программа распространяется в надежде, что она будет полезной, но БЕЗ
КАКИХ\-ЛИБО ГАРАНТИЙ, даже без подразумеваемых гарантий КОММЕРЧЕСКОЙ ЦЕННОСТИ
или ПРИГОДНОСТИ ДЛЯ ОПРЕДЕЛЕННОЙ ЦЕЛИ. См. GNU General Public License для
более подробной информации.
.sp
Вы должны получить копию GNU General Public License вместе с этой
программой; если нет, напишите в Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110\-1301 USA
.sp
Кроме того, в качестве особого исключения, владельцы авторских прав дают
разрешение на ссылку части кода этой программы с библиотекой OpenSSL при
определенных условиях, как описано в каждом отдельном исходном файле, а
также распространять эту комбинацию вместе. Вы должны подчиняться GNU
General Public License во всех отношениях для всего используемого кода,
кроме OpenSSL. Если вы измените файл(ы) с этим исключением, вы можете
расширить это исключение для вашей версии файла(ов), но вы не обязаны делать
это. Если вы не хотите сделать это, удалите это заявление об исключении из
вашей версии. Если вы удалите это заявление об исключении из всех исходных
файлов в программе, то удалить его и здесь.
.SH АВТОР ПЕРЕВОДА
.sp
ITriskTI <\fI\%ITriskTI@gmail.com\fP>
.sp
Если вы нашли ошибку, неточность в переводе или считаете, что переведено
неправильно, тогда, пожалуйста, сообщите мне на e\-mail.
.SH ПРИМЕЧАНИЕ
.sp
Эта страница руководства может содержать не обязательно самую последнюю информацию.
Если есть некоторые противоречия между этой страницей руководства и фактическим
программным обеспечением, пожалуйста, обращайтесь к английской версии страницы
руководства.
.\" Generated by docutils manpage writer.
.\" 
.
